{"version":3,"sources":["components/MenuComponent.js","scripts/saveScenario.js","scripts/loadScenario.js","components/MapComponent.js","components/ColorBarComponent.js","components/TimelineAddButton.js","components/TimelineMarker.js","components/TimelineBarComponent.js","scripts/useWindowSize.js","components/TimelineEventComponent.js","components/TimelineComponent.js","themes/default.js","scripts/createScenarioEntry.js","App.js","scripts/createRegionDict.js","scripts/createRegionNameDict.js","index.js"],"names":["useStyles","makeStyles","theme","menuContainer","position","top","left","height","width","zIndex","backgroundColor","palette","background","default","borderBottomRightRadius","display","flexFlow","justifyContent","menuButton","fontSize","margin","padding","MenuComponent","props","classes","className","Button","size","onClick","obj","blob","Blob","JSON","stringify","type","saveAs","saveScenario","data","onDrop","acceptedFiles","file","onload","text","then","parse","loadScenario","updateScenario","getRootProps","getInputProps","MapComponent","state","baseMap","geojsonRef","React","createRef","onEachFeature","bind","style","getRegionColorByIndex","resetAllRegionStyle","clickRegion","highlightRegion","resetHighlightRegion","feature","layer","addEventListener","index","color","this","regionDict","themeDict","polyFillColorDefault","polyStrokeColor","weight","polyStrokeWeight","fillColor","properties","regionID","fillOpacity","polyFillOpacityDefault","polyFillOpacityHovered","setStyle","hightlightStyle","assignRegion","Object","values","current","_layers","forEach","MapContainer","center","zoom","scrollWheelZoom","zoomSnap","doubleClickZoom","zoomControl","attributionControl","mapContainer","TileLayer","attribution","url","noWrap","GeoJSON","ref","AttributionControl","Component","withStyles","ColorBarComponent","colorBarContainer","onChangeComplete","event","setState","hex","alignItems","borderRadius","transform","addIconButtonContainer","addIconButton","secondary","TimelineAddButton","timelineMarkerSpacing","IconButton","addEntry","timelineMarker","entryButton","primary","markerLabel","textAlign","textOverflow","overflow","whiteSpace","TimelineMarker","icon","selected","Typography","variant","timelineMarkerLabelWidth","marginLeft","label","updateActiveEntry","timelineBarContainer","bottom","timelineLine","timelineBarContentContainer","timelineBarMarkerContainer","TimelineBarComponent","markers","scenarioData","map","entry","date","activeEntry","useState","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","removeEventListener","useWindowSize","lineLength","Math","max","length","eventContainer","minWidth","minHeight","eventBar","eventContent","marginTop","flexGrow","resize","eventButton","dateInput","TimelineEventComponent","TextField","value","onChange","e","updateEventDate","target","clearEntry","deleteEntry","disabled","oneEntryLeft","updateEvent","multiline","timelineComponent","TimelineComponent","material","other","createScenarioEntry","cloneDeep","regionDictDefault","geoJson","retval","features","region","createRegionDict","mapAdmin","regionNameDict","name","createRegionNameDict","App","colorBarRef","mapRef","getColor","currentData","newRegionDict","splice","newIndex","callback","newScenario","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c5077c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport saveScenario from '../scripts/saveScenario.js';\r\nimport loadScenario from '../scripts/loadScenario.js';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        height: 25,\r\n        width: 150,\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        borderBottomRightRadius: 50,\r\n        display: \"flex\",\r\n        flexFlow: \"row\",\r\n        justifyContent: \"flex-start\",\r\n    },\r\n    menuButton: {\r\n        fontSize: 12,\r\n        margin: 0,\r\n        padding: 0,\r\n        height:\"100%\",\r\n    }\r\n}));\r\n\r\nexport default function MenuComponent(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.menuContainer}>\r\n            <Button size=\"small\" className={classes.menuButton} onClick={() => { saveScenario(props.data); }}>Save</Button>\r\n            <Dropzone\r\n                onDrop={acceptedFiles => {\r\n                    loadScenario(acceptedFiles[0], props.updateScenario);\r\n                }}\r\n            >\r\n                {/*acceptedFiles[0] as we only care about a single file TODO: make some restriction to filetype (.json) to upload and number of files to upload (1 only)*/}\r\n                {/*TODO: Here we used a drop zone, this might be an overkill to be honest as I only need a load button, so if performance drops too much or too much bandwidth taken, try to simplify this*/}\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <Button size=\"small\" className={classes.menuButton}>Load</Button>\r\n                        {/*This is a dummy button for visuals only, the uploading functionality is contained in the Dropzone and the input element*/}\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </div>\r\n    );\r\n}","import { saveAs } from 'file-saver';\r\n\r\n// Expects an generic javascript object, one that is compatible with JSON.stringify and reading\r\nexport default function saveScenario(obj) {\r\n    const blob = new Blob([JSON.stringify(obj)], {type: \"application/json;charset=utf-8\"});\r\n    saveAs(blob, \"save.json\");\r\n};","// Expects a single file object, one that is compatible with JSON.stringify after processing\r\n// Returns the JSON object\r\nexport default function loadScenario(file, onload=null) {\r\n    file.text().then(text => {\r\n        const obj = JSON.parse(text);\r\n        if (onload) {\r\n            onload(obj);\r\n        }\r\n    });\r\n}","// Import React\r\nimport React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n// Import leaflet\r\nimport { MapContainer, GeoJSON, TileLayer, AttributionControl } from 'react-leaflet';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nconst useStyles = theme => ({\r\n    mapContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100vw\",\r\n        height: \"calc(100vh - 45px)\", // the -50px is to ensure that the map's bottom meets the timeline bar, hence if timeline bar height is adjusted, adjust map height here accordingly\r\n        zIndex: 0,\r\n    },\r\n});\r\nclass MapComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            baseMap: props.baseMap,\r\n        }\r\n        this.geojsonRef = React.createRef(null);\r\n        // Binding methods\r\n        this.onEachFeature = this.onEachFeature.bind(this);\r\n        this.style = this.style.bind(this);\r\n        this.getRegionColorByIndex = this.getRegionColorByIndex.bind(this);\r\n        this.resetAllRegionStyle = this.resetAllRegionStyle.bind(this);\r\n        this.clickRegion = this.clickRegion.bind(this);\r\n        this.highlightRegion = this.highlightRegion.bind(this);\r\n        this.resetHighlightRegion = this.resetHighlightRegion.bind(this);\r\n    }\r\n\r\n    onEachFeature(feature, layer) {\r\n        layer.addEventListener(\"click\", () => {\r\n            this.clickRegion(feature, layer);\r\n        });\r\n        layer.addEventListener(\"mouseover\", () => {\r\n            this.highlightRegion(feature, layer);\r\n        });\r\n        layer.addEventListener(\"mouseout\", () => {\r\n            this.resetHighlightRegion(feature, layer);\r\n        });\r\n    }\r\n\r\n    // Returns hex color for the region of the specified index\r\n    getRegionColorByIndex(index) {\r\n        let color = this.props.regionDict[index].color;\r\n        // Return color hex if there is one, else if record shows null color, use the default fill color as specified in themeDict\r\n        return color ? color : this.props.themeDict.polyFillColorDefault;\r\n    }\r\n\r\n    style(feature, layer) {\r\n        return {\r\n            color: this.props.themeDict.polyStrokeColor,\r\n            weight: this.props.themeDict.polyStrokeWeight,\r\n            fillColor: this.getRegionColorByIndex(feature.properties.regionID),\r\n            fillOpacity: this.props.themeDict.polyFillOpacityDefault,\r\n        };\r\n    }\r\n\r\n\r\n    hightlightStyle(feature, layer) {\r\n        return {\r\n            fillOpacity: this.props.themeDict.polyFillOpacityHovered\r\n        };\r\n    }\r\n\r\n    highlightRegion(feature, layer) {\r\n        layer.setStyle(this.hightlightStyle(feature, layer));\r\n    }\r\n\r\n    resetHighlightRegion(feature, layer) {\r\n        layer.setStyle(this.style(feature, layer));\r\n    }\r\n\r\n    clickRegion(feature, layer) {\r\n        this.props.assignRegion(feature.properties.regionID);\r\n        layer.setStyle(this.style(feature, layer)); // TODO: such setting would not highlight the region though, which might be a problem\r\n    }\r\n\r\n    // Resets styles of all regions to match those of the regionDict data\r\n    resetAllRegionStyle() {\r\n        Object.values(this.geojsonRef.current._layers).forEach(layer => {\r\n            layer.setStyle(this.style(layer.feature, layer));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <MapContainer\r\n                center={[30, 0]}\r\n                zoom={3}\r\n                scrollWheelZoom\r\n                zoomSnap={0}\r\n                doubleClickZoom={false}\r\n                zoomControl={false}\r\n                attributionControl={false}\r\n                className={classes.mapContainer}\r\n            >\r\n                <TileLayer\r\n                    attribution='Map data: &copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors | Map style: &copy <a href=\"https://opentopomap.org/\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\r\n                    url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\r\n                    noWrap\r\n                ></TileLayer>\r\n                <GeoJSON\r\n                    data={this.state.baseMap}\r\n                    style={this.style}\r\n                    onEachFeature={this.onEachFeature}\r\n                    ref={this.geojsonRef}\r\n                ></GeoJSON>\r\n                <AttributionControl position=\"bottomright\"/>\r\n            </MapContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(MapComponent);","// Import React\r\nimport React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n// Import color picker\r\nimport { SliderPicker } from 'react-color';\r\n\r\nconst useStyles = theme => ({\r\n    colorBarContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: \"35%\",\r\n        width: \"30%\",\r\n        height: 50,\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"stretch\",\r\n        padding: 5,\r\n        borderRadius: 5,\r\n        transform: \"scale(0.8)\"\r\n    },\r\n});\r\n\r\nclass ColorBarComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            color: \"#bf4340\", // Default color, it is the color when slider in first row of color bar is set to leftmost position, and the centre one of the 5 colors in the second row of the color bar is chosen\r\n        }\r\n    }\r\n\r\n    render() { //FIXME: add some color tests to ensure that selected color is notified if coincides with a color already on the page\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.colorBarContainer}>\r\n                <SliderPicker color={this.state.color} onChangeComplete={(color, event) => this.setState({color: color.hex})}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(ColorBarComponent);","import { makeStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    addIconButtonContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        backgroundColor: theme.palette.background.default,\r\n        padding: 0,\r\n        zIndex: 1,\r\n        transform: \"scale(0.8)\"\r\n    },\r\n    addIconButton: {\r\n        padding: 0,\r\n        zIndex: 2,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\nexport default function TimelineAddButton(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <div className={classes.addIconButtonContainer} style={{left : props.themeDict.timelineMarkerSpacing/2 + 16}}>\r\n                <IconButton size=\"small\" className={classes.addIconButton} onClick={() => { props.addEntry(props.index + 1); }}>\r\n                    {/*This is the fake button for visuals only*/}\r\n                    <AddIcon></AddIcon>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n}","// Import packages\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TimelineAddButton from './TimelineAddButton.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    timelineMarker: {\r\n        position: \"absolute\",\r\n        top: 15,\r\n        zIndex: 2,\r\n        transform: \"scale(0.8)\",\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    entryButton: {\r\n        color: theme.palette.text.primary,\r\n        padding: 0,\r\n    },\r\n    markerLabel: {\r\n        position: \"absolute\",\r\n        top: -20,\r\n        left: \"50%\",\r\n        textAlign: \"center\",\r\n        textOverflow: \"ellipsis\",\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\"\r\n    },\r\n}));\r\n\r\nexport default function TimelineMarker(props) {\r\n    const classes = useStyles();\r\n    const icon = props.selected ? <RadioButtonCheckedIcon/> : <RadioButtonUncheckedIcon/>;\r\n    return (\r\n        <div className={classes.timelineMarker} style={{left: (props.index+1)*props.themeDict.timelineMarkerSpacing}}>\r\n            {/*props.index+1 as we wish to add after the current entry*/}\r\n            <Typography\r\n                className={classes.markerLabel}\r\n                variant=\"caption\"\r\n                style={{\r\n                    width:props.themeDict.timelineMarkerLabelWidth,\r\n                    marginLeft:-props.themeDict.timelineMarkerLabelWidth/2,\r\n                }}\r\n            >\r\n            {props.label}\r\n            </Typography>\r\n            <TimelineAddButton themeDict={props.themeDict} addEntry={props.addEntry} index={props.index}/>\r\n            <IconButton className={classes.entryButton} size=\"small\" onClick={() => {props.updateActiveEntry(props.index);}}>\r\n                {icon}\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}","// Import packages\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\n// Import custom components\r\nimport TimelineMarker from './TimelineMarker.js';\r\n\r\n// Import script\r\nimport useWindowSize from '../scripts/useWindowSize.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    timelineBarContainer: {\r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n        height: 45, // If this is adjusted, need to adjust the height of the map element and event component as well so that the top of the timeline meets the bottom of the map\r\n        bottom: 0,\r\n        overflow: \"hidden\",\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    timelineLine: {\r\n        position: \"absolute\",\r\n        top: 26,\r\n        left: 0,\r\n        height: 2,\r\n        backgroundColor: theme.palette.text.primary,\r\n    },\r\n    timelineBarContentContainer: {\r\n        display: \"relative\",\r\n        height: \"100%\",\r\n    },\r\n    timelineBarMarkerContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n    }\r\n}));\r\n\r\nexport default function TimelineBarComponent(props) {\r\n    const classes = useStyles();\r\n    const markers = props.scenarioData.map((entry, index) =>\r\n        <TimelineMarker key={index} index={index} label={entry.date} selected={props.activeEntry === index} updateActiveEntry={props.updateActiveEntry} addEntry={props.addEntry} themeDict={props.themeDict} />\r\n    )\r\n    const [width, height] = useWindowSize(); // Values that change whenever window is resized, height is not used for now TODO: get rid of height part if performacne suffers, else overhead I guess is fine\r\n    const lineLength = Math.max(width, (props.scenarioData.length + 1) * props.themeDict.timelineMarkerSpacing); // Take the larger of the viewport width and the length required to fit the timeline markers as the length of the timeline TODO: the issue of what I've done here is that the right end and the left end of the timeline won't match up in length when the second line length case in the max arguments is triggered, not too important, but fix it if possible\r\n    return (\r\n        <div className={classes.timelineBarContainer}>\r\n            <Scrollbars className={classes.timelineBarContentContainer}>\r\n                <div className={classes.timelineBarContentContainer}>\r\n                    <div className={classes.timelineLine} style={{ width: lineLength }}></div>\r\n                    <div className={classes.timelineBarMarkerContainer} style={{ width: lineLength }}>\r\n                        {markers}\r\n                    </div>\r\n                </div>\r\n            </Scrollbars>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\n// Function for listener on windows resize\r\nexport default function useWindowSize() {\r\n    const [size, setSize] = React.useState([0, 0]);\r\n    React.useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n}","// Import React\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport { InputBase } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    eventContainer: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        bottom: 45, // This value should be such that the event box touches the timeline bar on the bottom, so adjust accordingly\r\n        minWidth: 290, // At least 300px adding in padding\r\n        width: \"20%\",\r\n        minHeight: 190, // At least 200px adding in padding\r\n        height: \"30%\",\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        display: \"flex\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"stretch\",\r\n        padding: 5,\r\n    },\r\n    eventBar: {\r\n        backgroundColor: theme.palette.background.default,\r\n        display: \"flex\",\r\n        height: 50,\r\n        flexFlow: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    eventContent: {\r\n        marginTop: 5,\r\n        flexGrow: 1,\r\n        resize: \"none\",\r\n    },\r\n    eventButton: {\r\n        fontSize: 10,\r\n        width: 50,\r\n        margin: 3,\r\n    },\r\n    dateInput: {\r\n        margin: 10,\r\n    }\r\n}));\r\n\r\nexport default function TimelineEventComponent(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.eventContainer}>\r\n            <div className={classes.eventBar}>\r\n                <TextField size=\"small\" label=\"Date\" margin=\"dense\" value={props.date} onChange={e => {props.updateEventDate(e.target.value)}} className={classes.dateInput}></TextField>\r\n                <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={() => {props.clearEntry();}} className={classes.eventButton}>Clear Entry</Button>\r\n                <Button variant=\"contained\" size=\"small\" color=\"secondary\" onClick={() => {props.deleteEntry(props.activeEntry);}} disabled={props.oneEntryLeft} className={classes.eventButton}>Delete Entry</Button>\r\n                {/*Delete button is disabled for the first entry TODO: because for now we haven't implemented the add entry before first element functionality yet, nor is there a button for it*/}\r\n            </div>\r\n            <textarea className={classes.eventContent} value={props.event} onChange={e => {props.updateEvent(e.target.value)}} multiline=\"true\"></textarea>\r\n        </div>\r\n    );\r\n}","// Import React\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// Import custom components\r\nimport TimelineBarComponent from './TimelineBarComponent.js';\r\nimport TimelineEventComponent from './TimelineEventComponent.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    timelineComponent: {\r\n        zIndex: 1,\r\n    }\r\n}));\r\n\r\nexport default function TimelineComponent(props) {\r\n    const classes = useStyles();\r\n    const oneEntryLeft = props.scenarioData.length === 1; // If there is onely 1 entry left, disable the entry delete button as currently the add entry after deleting all entries functionality is yet to be added TODO:\r\n    return (\r\n        <div className={classes.timelineComponent}>\r\n            <TimelineBarComponent\r\n                updateActiveEntry={props.updateActiveEntry}\r\n                activeEntry={props.activeEntry}\r\n                scenarioData={props.scenarioData}\r\n                addEntry={props.addEntry}\r\n                themeDict={props.themeDict}\r\n            />\r\n            <TimelineEventComponent\r\n                date={props.scenarioData[props.activeEntry].date}\r\n                event={props.scenarioData[props.activeEntry].event}\r\n                updateEventDate={props.updateEventDate}\r\n                updateEvent={props.updateEvent}\r\n                deleteEntry={props.deleteEntry}\r\n                activeEntry={props.activeEntry}\r\n                clearEntry={props.clearEntry}\r\n                oneEntryLeft={oneEntryLeft}\r\n                themeDict={props.themeDict}\r\n            />\r\n        </div>\r\n    );\r\n}","// Colors should be given in hex\r\n\r\nconst themeDict = {\r\n    material: { // Theme object for material ui theming component FIXME: add corresponding use themeprovider thing to the app js\r\n\r\n    },\r\n    other: { // Theme object for map (currently done via cesium) to use, this is passed down as props to all child\r\n        polyStrokeColor: \"#A9A9A9\",\r\n        polyStrokeWeight: 0.5, // This seems to not work very well on windows for cesium\r\n        polyFillColorDefault: \"#f5f5f5\",\r\n        polyFillOpacityDefault: 0.7,\r\n        polyFillOpacityHovered: 0.9,\r\n        timelineMarkerSpacing: 120,\r\n        timelineMarkerLabelWidth: 100,\r\n    }\r\n\r\n}\r\n\r\nexport default themeDict;","// Import deep cloning function\r\nimport cloneDeep from 'clone-deep';\r\n\r\n// Create a scenario entry based on the inputted regionDict, date string, event description string\r\nexport default function createScenarioEntry(regionDict, date=\"\", event=\"\") {\r\n    return {\r\n        date: date,\r\n        event: event,\r\n        regionDict: cloneDeep(regionDict), // Necessary as it appears for such complicated objects simply setting equal to regionDict would not be pass by value enough, and so you end up with entries sharing state\r\n    }\r\n}","// Import React\r\nimport React from \"react\";\r\n\r\n// Import css\r\nimport './App.css';\r\n\r\n// Import custom components\r\nimport MenuComponent from \"./components/MenuComponent\";\r\nimport MapComponent from './components/MapComponent.js';\r\nimport ColorBarComponent from './components/ColorBarComponent';\r\nimport TimelineComponent from \"./components/TimelineComponent\";\r\n\r\n// Import default themeDict\r\nimport themeDict from './themes/default';\r\n\r\n// Import default basemap geojson\r\nimport mapAdmin from \"./assets/basemap/mapAdmin.json\";\r\n\r\n// Import scripts\r\nimport createRegionDict from './scripts/createRegionDict.js';\r\nimport createScenarioEntry from './scripts/createScenarioEntry.js';\r\nimport createRegionNameDict from './scripts/createRegionNameDict.js';\r\n\r\n// Import deep clone\r\nimport cloneDeep from \"clone-deep\";\r\n\r\n// Convert mapAdmin to a prototype, const dictionary indexed by regionID\r\nconst regionDictDefault = createRegionDict(mapAdmin);\r\n\r\n// Create a constant dictionary mapping index of region to name of region, as opposed to keeping this repeated info contained in every single entry in the scenario data\r\nconst regionNameDict = createRegionNameDict(mapAdmin);\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      scenarioData: [ // Array of information for the scenarios\r\n        createScenarioEntry(regionDictDefault, \"2000 January 1\", \"An Event\"), // Default is 2 entry with the default regionDict, empty date and event entry\r\n        createScenarioEntry(regionDictDefault, \"2010 January 1\", \"Another Event\"),\r\n      ],\r\n      activeEntry: 0, // index of currently active on map entry in scenarioData\r\n    }\r\n    this.regionNameDict = regionNameDict;\r\n    this.themeDict = themeDict;\r\n    // Numerous refs\r\n    this.colorBarRef = React.createRef(null);\r\n    this.mapRef = React.createRef(null);\r\n\r\n    // Bind this to methods\r\n    this.getColor = this.getColor.bind(this);\r\n    this.assignRegion = this.assignRegion.bind(this);\r\n    this.updateActiveEntry = this.updateActiveEntry.bind(this);\r\n    this.addEntry = this.addEntry.bind(this);\r\n    this.updateEventDate = this.updateEventDate.bind(this);\r\n    this.updateEvent = this.updateEvent.bind(this);\r\n    this.deleteEntry = this.deleteEntry.bind(this);\r\n    this.clearEntry = this.clearEntry.bind(this);\r\n    this.updateScenario = this.updateScenario.bind(this);\r\n  }\r\n\r\n  // Returns hex of currently selected color, as in the colorBarComponent\r\n  getColor() {\r\n    return this.colorBarRef.current.state.color; // TODO: not the best practice, but using refs does make it easy\r\n  }\r\n\r\n  // Adds entry in position at specified index in scenarioData, new entry has no date nor event\r\n  addEntry(index) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    let newRegionDict = null;\r\n    if (index > 0) { // use the regionDict of the previous entry as the starting spot\r\n      newRegionDict = createScenarioEntry(currentData[index - 1].regionDict);\r\n    } else { // use the default regionDict if we are to insert at the beginning, currently this is not possible as it seems to lead to a multi-rerender yet some code is not ran in app.render scenario, and I get a regionDict undefined thing which I have no idea why; in light of this, I didn't do the add entry button in front of the first entry\r\n      newRegionDict = createScenarioEntry(regionDictDefault);\r\n    }\r\n    currentData.splice(index, 0, newRegionDict);\r\n    this.setState({ scenarioData: currentData }, () => {this.updateActiveEntry(index);});\r\n  }\r\n\r\n  // Deletes entry in position at specified index in scenarioData\r\n  deleteEntry(index) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData.splice(index, 1);\r\n    if (index === this.state.scenarioData.length-1) {\r\n      // Deleted entry is last entry, hence new entry to be focused on is the entry before the last entry\r\n      let newIndex = index-1;\r\n      // To avoid possibly access invalid active entry values, we update the activeEntry first, then update the scenarioDict to delete the entry\r\n      this.updateActiveEntry(newIndex, () => {this.setState({ scenarioData: currentData });}) // Note reset style is included in the updateActiveEntry function already\r\n    } else {\r\n      // Deleted entry was not the last entry, hence new entry to be focused on is the entry after the deleted entry, i.e. activeEntry index need not change\r\n      this.setState({ scenarioData: currentData }, () => {this.mapRef.current.resetAllRegionStyle();});\r\n    }\r\n  }\r\n\r\n  // Updates event date for active entry, expects a string argument\r\n  updateEventDate(date) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].date = date;\r\n    this.setState({ scenarioData: currentData });\r\n  }\r\n\r\n  // Updates event description for active entry, expects a string argument\r\n  updateEvent(event) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].event = event;\r\n    this.setState({ scenarioData: currentData });\r\n  }\r\n\r\n  // Clears date and event of the current active entry\r\n  clearEntry() {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].event = \"\";\r\n    currentData[this.state.activeEntry].date = \"\";\r\n    this.setState({ scenarioData: currentData });\r\n  }\r\n\r\n  // Updates index for active entry\r\n  updateActiveEntry(newIndex, callback=null) {\r\n    this.setState(\r\n      { activeEntry: newIndex },\r\n      () => {\r\n        this.mapRef.current.resetAllRegionStyle(); // TODO: not the best practice, but using refs does make it easy\r\n        if (callback) { // runs callback if callback is not null\r\n          callback();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Assigns region of specified index the currently selected color\r\n  assignRegion(index) {\r\n    const color = this.getColor();\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].regionDict[index].color = color;\r\n    this.setState({ scenarioData: currentData });\r\n  }\r\n\r\n  // Loads the specified save file, then sets current active entry to the first one, thereby resetting the region styling as well\r\n  updateScenario(newScenario) {\r\n    this.setState({ scenarioData: newScenario }, () => {this.updateActiveEntry(0)});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <MenuComponent data={this.state.scenarioData} updateScenario={this.updateScenario}></MenuComponent>\r\n        <TimelineComponent updateActiveEntry={this.updateActiveEntry} activeEntry={this.state.activeEntry} scenarioData={this.state.scenarioData} addEntry={this.addEntry} updateEventDate={this.updateEventDate} updateEvent={this.updateEvent} deleteEntry={this.deleteEntry} clearEntry={this.clearEntry} themeDict={this.themeDict.other}/>\r\n        <ColorBarComponent ref={this.colorBarRef} themeDict={this.themeDict.other} />\r\n        <MapComponent themeDict={this.themeDict.other} baseMap={mapAdmin} assignRegion={this.assignRegion} regionDict={this.state.scenarioData[this.state.activeEntry].regionDict} ref={this.mapRef} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// Given geoJson with features (here assume regions, i.e. polygons/multipolygons) each with properties regionID and color and label\r\n// Generate a js object with keys as the regionID and value as object of the properties of the regions\r\nexport default function createRegionDict(geoJson) {\r\n    let retval = {};\r\n    geoJson.features.forEach(region => {\r\n        retval[region.properties.regionID] = {\r\n            color: null, // expects a hex string, or if null takes the default fill color as specified in theme\r\n            label: null, // region has no label by default\r\n        };\r\n    });\r\n    return retval;\r\n}","// Given geoJson with features (here assume regions, i.e. polygons/multipolygons) each with properties regionID and name\r\n// Generate a js object with keys as the regionID and value as object of the properties of the regions\r\nexport default function createRegionNameDict(geoJson) {\r\n    let retval = {};\r\n    geoJson.features.forEach(region => {\r\n        retval[region.properties.regionID] = region.properties.name;\r\n    });\r\n    return retval;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}