{"version":3,"sources":["components/HelpComponent.js","components/MenuComponent.js","scripts/loadScenario.js","components/LassoComponent.js","components/MapComponent.js","components/ColorBarComponent.js","components/ToolbarComponent.js","plugins/LegendPlugin.js","plugins/RegionInfoPlugin.js","scripts/createScenarioEntry.js","plugins/AltHistEditorLoaderPlugin.js","plugins/ScenarioPlugin.js","appPlugins.js","components/PluginMenuComponent.js","components/TimelineAddButton.js","components/TimelineMarker.js","components/TimelineBarComponent.js","scripts/useWindowSize.js","components/TimelineEventComponent.js","assets/img/MarbleTexture.jpg","assets/img/GoldTexture.png","themes/default.js","App.js","scripts/createRegionDict.js","scripts/createRegionNameDict.js","scripts/saveScenario.js","index.js"],"names":["useStyles","makeStyles","theme","helpContainer","width","helpContent","margin","HelpComponent","props","classes","Grid","className","container","direction","justify","alignItems","href","React","memo","menuContainer","position","top","left","height","zIndex","display","flexFlow","justifyContent","borderBottomStyle","borderRightStyle","borderColor","palette","border","backgroundImage","main","WebkitBorderImage","borderImage","menuButton","fontSize","padding","MenuComponent","id","Button","size","onClick","window","location","reload","save","onDrop","acceptedFiles","file","onload","text","then","obj","JSON","parse","loadScenario","loadSave","getRootProps","getInputProps","openHelp","LassoComponent","eventHandler","event","indices","layers","forEach","layer","feature","properties","regionID","push","updateLassoSelecting","assignRegions","map","useMap","lasso","L","setOptions","intersect","enable","useEffect","addEventListener","disable","removeEventListener","mapProviders","name","attr","src","MapComponent","state","baseMap","geojsonRef","createRef","onEachFeature","bind","style","resetAllRegionStyle","clickRegion","highlightRegion","resetHighlightRegion","resetSpecifiedRegionStyle","lassoSelecting","processRegionHoveredOn","processRegionHoveredOut","color","this","getRegionColorByIndex","themeDict","polyStrokeColor","weight","polyStrokeWeight","fillColor","polyFillColorDefault","fillOpacity","polyFillOpacityColored","polyFillOpacityDefault","polyFillOpacityHovered","setStyle","hightlightStyle","Object","values","current","_layers","index","MapContainer","center","zoom","scrollWheelZoom","preferCanvas","zoomSnap","wheelPxPerZoomLevel","doubleClickZoom","zoomControl","attributionControl","worldCopyJump","mapContainer","LayersControl","entry","BaseLayer","checked","TileLayer","attribution","url","Overlay","GeoJSON","data","ref","AttributionControl","PureComponent","withStyles","filter","ColorBarComponent","colorBarContainer","onChange","setState","hex","backgroundColor","background","paper","marginTop","borderStyle","toolbarContainer","right","marginRight","borderLeftStyle","toolbarButton","ToolbarComponent","lassoButtonText","lassoButtonColor","eraserButtonText","erasing","eraserButtonColor","updateErasing","legendContainer","legendEntry","legendEntryColor","legendEntryLabel","legendGrid","LegendEntry","setDefaultColorBarColor","InputBase","value","label","LegendPluginDict","component","entries","keys","app","pluginData","activeEntry","item","e","currentLegendData","cloneDeep","target","updatePluginData","wrap","initState","scenarioData","i","retval","length","functions","onAssignRegions","removedColors","addedColor","onAddEntry","newLegendEntry","splice","onDeleteEntry","onUpdateActiveEntry","onUpdateEventDate","onUpdateEvent","onLoadSave","onProcessRegionHoveredOn","onProcessRegionHoveredOut","regionInfoContainer","paddingLeft","regionInfoColor","marginLeft","primary","regionInfoLabel","paddingTop","paddingBottom","RegionInfoPluginDict","other","Typography","variant","regionDict","newRegionInfoData","createScenarioEntry","date","csscolors","altHistEditorLoaderContainer","loaderDropzone","textAlign","default","loader","currentSaveVersion","version","detectSaveVersion","processSave","one_zero_to_one_one","one_one_to_one_two","customMap","customMapGeojson","order","entryDict","AltHistEditorLoaderPluginDict","mapType","convertedObj","colorData","regionDictDefault","mapData","colorStringDict","colorEntry","plugins","scenarioDataDefault","legendData","console","log","scenarios","scen356BC","scen1206","scen1444","scen1936","scenarioContainer","scenarioSelect","RegionInfoPlugin","LegendPlugin","useState","selectedScenario","setSelectedScenario","Select","key","MenuItem","AltHistEditorLoaderPlugin","pluginMenuContainer","minWidth","minHeight","transform","borderTopStyle","accordionContainer","paddingRight","accordionSummary","accordionDetails","PluginMenuComponent","accordionItems","Plugin","Accordion","defaultExpanded","square","AccordionSummary","expandIcon","IconButtonProps","AccordionDetails","addIconButtonContainer","addIconButton","secondary","TimelineAddButton","timelineMarkerSpacing","IconButton","addEntry","timelineMarker","entryButton","markerLabel","textOverflow","overflow","whiteSpace","TimelineMarker","icon","selected","timelineMarkerLabelWidth","updateActiveEntry","timelineBarContainer","bottom","timelineLine","timelineBarContentContainer","timelineBarMarkerContainer","TimelineBarComponent","markers","setSize","useLayoutEffect","updateSize","innerWidth","innerHeight","useWindowSize","lineLength","Math","max","eventContainer","eventBar","eventButtonHolder","eventContent","flexGrow","resize","eventButton","dateInput","TimelineEventComponent","TextField","updateEventDate","clearEntry","deleteEntry","disabled","oneEntryLeft","updateEvent","multiline","material","type","light","dark","GoldTexture","MarbleTexture","ReactGA","initialize","pageview","pathname","search","geoJson","features","region","createRegionDict","mapAdmin","regionNameDict","createRegionNameDict","createMuiTheme","App","helpOn","colorBarRef","mapRef","getColor","closeHelp","currentData","newState","callback","currentColorData","newRegionDict","newColorEntry","newIndex","previousColor","blob","Blob","stringify","saveAs","saveScenario","saveData","ThemeProvider","Backdrop","backdrop","open","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30571563.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    helpContainer: {\r\n        width: \"80%\"\r\n    },\r\n    helpContent: {\r\n        margin: 5,\r\n    }\r\n}));\r\n\r\nfunction HelpComponent(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid className = { classes.helpContainer } container direction = \"column\" justify = \"center\" alignItems = \"flex-start\">\r\n            <h1 className={classes.helpContent}>Welcome to Making History Sandbox!</h1>\r\n            <h3 className={classes.helpContent}>Click anywhere to return to app</h3>\r\n            <p className={classes.helpContent}>This is an app aiming to make alternate history timeline creations easier. Features include a map with named regions that can be easily labelled, interactive timeline for adding/removing timepoints, pre-made scenarios and more.</p>\r\n            <h2 className={classes.helpContent}>Coloring and Labelling</h2>\r\n            <p className={classes.helpContent}>Color/label region: use top panel, then click region to color. Use Legend panel on the right to modify label for regions of the color.</p>\r\n            <p className={classes.helpContent}>Pick existing color: click color icon in legend for that color</p>\r\n            <p className={classes.helpContent}>Mass labelling: click lasso under the color panel to activate lasso mode.</p>\r\n            <p className={classes.helpContent}>Erase: click erase under the color panel, then either click on region or use lasso to mass unlabel.</p>\r\n            <h2 className={classes.helpContent}>Adding/deleting entries</h2>\r\n            <p className={classes.helpContent}>Delete: use delete button on the bottom right to delete current time point</p>\r\n            <p className={classes.helpContent}>Add: use the small + on the timeline to add time points in the location. Added entry will inherit the previous entry</p>\r\n            <h2 className={classes.helpContent}>Switching background</h2>\r\n            <p className={classes.helpContent}>Use top right layers icon to choose the background map and whether regions should be displayed</p>\r\n            <h2 className={classes.helpContent}>Alternate History Editor users</h2>\r\n            <p className={classes.helpContent}>To load save: use the Alt Hist Editor Loader panel at the end of the right panel (scroll down if it isn't visible)</p>\r\n            <h2 className={classes.helpContent}>For those that want to see code</h2>\r\n            <a className={classes.helpContent} href=\"https://github.com/Yulin-W/making-history-sandbox\">Github repository</a>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default React.memo(HelpComponent);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport loadScenario from '../scripts/loadScenario.js';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        height: 25,\r\n        width: 255,\r\n        zIndex: 1,\r\n        display: \"flex\",\r\n        flexFlow: \"row\",\r\n        justifyContent: \"flex-start\",\r\n        borderBottomStyle: \"ridge\",\r\n        borderRightStyle: \"ridge\",\r\n        borderColor: theme.palette.border,\r\n        backgroundImage: theme.palette.backgroundImage.main,\r\n        WebkitBorderImage: theme.palette.borderImage\r\n    },\r\n    menuButton: {\r\n        fontSize: 12,\r\n        margin: 0,\r\n        padding: 0,\r\n        height: \"100%\",\r\n    }\r\n}));\r\n\r\nfunction MenuComponent(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.menuContainer} id=\"menu\">\r\n            <Button size=\"small\" className={classes.menuButton} onClick={() => window.location.reload()}>New</Button>\r\n            <Button size=\"small\" className={classes.menuButton} onClick={props.save}>Save</Button>\r\n            <Dropzone\r\n                onDrop={acceptedFiles => {\r\n                    loadScenario(acceptedFiles[0], props.loadSave);\r\n                }}\r\n            >\r\n                {/*acceptedFiles[0] as we only care about a single file TODO: make some restriction to filetype (.json) to upload and number of files to upload (1 only)*/}\r\n                {/*TODO: Here we used a drop zone, this might be an overkill to be honest as I only need a load button, so if performance drops too much or too much bandwidth taken, try to simplify this*/}\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <Button size=\"small\" className={classes.menuButton}>Load</Button>\r\n                        {/*This is a dummy button for visuals only, the uploading functionality is contained in the Dropzone and the input element*/}\r\n                    </div>\r\n                )}\r\n                </Dropzone>\r\n            <Button size=\"small\" className={classes.menuButton} onClick={props.openHelp}>Help</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(MenuComponent);","// Expects a single file object, one that is compatible with JSON.stringify after processing\r\n// Returns the JSON object\r\nexport default function loadScenario(file, onload=null) {\r\n    file.text().then(text => {\r\n        const obj = JSON.parse(text);\r\n        if (onload) {\r\n            onload(obj);\r\n        }\r\n    });\r\n}","import React from \"react\";\r\nimport L from \"leaflet\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport \"leaflet-lasso\";\r\n\r\nexport default function LassoComponent(props) {\r\n    // Event handler for when lasso selection is complete\r\n    const eventHandler = event => {\r\n        let indices = [];\r\n        if (event) { // Series of if statements to only record in indices the valid selected regions TODO: this seems a bit dodgy, problem is this is like one of those silently neglect mistakes types of code\r\n            if (event.layers) {\r\n                event.layers.forEach(layer => {\r\n                    if (layer) {\r\n                        if (layer.feature) {\r\n                            if (layer.feature.properties) {\r\n                                if (layer.feature.properties.regionID) {\r\n                                    indices.push(layer.feature.properties.regionID);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });       \r\n            }\r\n        }\r\n        props.updateLassoSelecting(false, () => {props.assignRegions(indices);})\r\n    };\r\n\r\n    // Setup lasso\r\n    const map = useMap();\r\n    const lasso = L.lasso(map);\r\n    lasso.setOptions({ intersect: true });\r\n    lasso.enable();\r\n\r\n    React.useEffect(() => {\r\n        // Execute region coloring upon lasso selection completion\r\n        map.addEventListener('lasso.finished', eventHandler);\r\n\r\n        return (() => { // What to do on unmounting the LassoComponent\r\n            lasso.disable(); // FIXME: bug: disabling via clicking cancel button, i.e. in the case of disabling via using the cancel button, appears to lead to the drawing of selection persisting, though that selection has no coloring effect\r\n            map.removeEventListener('lasso.finished', eventHandler); // Remove event handler to avoid creating multiple handlers\r\n        });\r\n    }, [map, lasso]);\r\n\r\n    return null;\r\n}\r\n","// Import React\r\nimport React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n// Import leaflet\r\nimport { MapContainer, GeoJSON, TileLayer, AttributionControl, LayersControl } from 'react-leaflet';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n// Import relevant custom components for plugins\r\nimport LassoComponent from \"./LassoComponent.js\";\r\n\r\nconst useStyles = theme => ({\r\n    mapContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100vw\",\r\n        height: \"calc(100vh - 45px)\", // the -50px is to ensure that the map's bottom meets the timeline bar, hence if timeline bar height is adjusted, adjust map height here accordingly\r\n        zIndex: 0,\r\n        filter: \"brightness(1) contrast(100%)\",\r\n    },\r\n});\r\n\r\n// Add leaflet providers here\r\nconst mapProviders = [\r\n    {\r\n        name: \"Esri.WorldImagery\",\r\n        attr: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\r\n        src: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\r\n    },\r\n    {\r\n        name: \"OpenTopoMap\",\r\n        attr: 'Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\r\n        src: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png'\r\n    },\r\n    {\r\n        name: \"OpenStreetMap.Mapnik\",\r\n        attr: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        src: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n    },\r\n    {\r\n        name: \"Stamen.TerrainBackground\",\r\n        attr: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        src: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}{r}.png'\r\n    },\r\n    {\r\n        name: \"Stamen.Watercolor\",\r\n        attr: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        src: 'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png'\r\n    },\r\n]\r\nclass MapComponent extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            baseMap: props.baseMap,\r\n        }\r\n        this.geojsonRef = React.createRef(null);\r\n        // Binding methods\r\n        this.onEachFeature = this.onEachFeature.bind(this);\r\n        this.style = this.style.bind(this);\r\n        this.resetAllRegionStyle = this.resetAllRegionStyle.bind(this);\r\n        this.clickRegion = this.clickRegion.bind(this);\r\n        this.highlightRegion = this.highlightRegion.bind(this);\r\n        this.resetHighlightRegion = this.resetHighlightRegion.bind(this);\r\n        this.resetSpecifiedRegionStyle = this.resetSpecifiedRegionStyle.bind(this);\r\n    }\r\n\r\n    onEachFeature(feature, layer) {\r\n        layer.addEventListener(\"click\", () => {\r\n            this.clickRegion(feature, layer);\r\n        });\r\n        layer.addEventListener(\"mouseover\", () => {\r\n            if (!this.props.lassoSelecting) {\r\n                // Ensures lasso selection is not interfered by mouse events\r\n                this.highlightRegion(feature, layer);\r\n                this.props.processRegionHoveredOn(layer);\r\n            }\r\n        });\r\n        layer.addEventListener(\"mouseout\", () => {\r\n            if (!this.props.lassoSelecting) {\r\n                // Ensures lasso selection is not interfered by mouse events\r\n                this.resetHighlightRegion(feature, layer);\r\n                this.props.processRegionHoveredOut(layer);\r\n            }\r\n        });\r\n    }\r\n\r\n    style(feature, layer) {\r\n        const color = this.props.getRegionColorByIndex(feature.properties.regionID);\r\n        return {\r\n            color: this.props.themeDict.polyStrokeColor,\r\n            weight: this.props.themeDict.polyStrokeWeight,\r\n            fillColor: color ? color : this.props.themeDict.polyFillColorDefault,\r\n            fillOpacity: color ? this.props.themeDict.polyFillOpacityColored : this.props.themeDict.polyFillOpacityDefault,\r\n        };\r\n    }\r\n\r\n\r\n    hightlightStyle(feature, layer) {\r\n        return {\r\n            fillOpacity: this.props.themeDict.polyFillOpacityHovered\r\n        };\r\n    }\r\n\r\n    highlightRegion(feature, layer) {\r\n        layer.setStyle(this.hightlightStyle(feature, layer));\r\n    }\r\n\r\n    resetHighlightRegion(feature, layer) {\r\n        layer.setStyle(this.style(feature, layer));\r\n    }\r\n\r\n    clickRegion(feature, layer) {\r\n        this.props.assignRegions([feature.properties.regionID]);\r\n        layer.setStyle(this.style(feature, layer)); // TODO: such setting would not highlight the region though, which might be a problem\r\n    }\r\n\r\n    // Resets styles of all regions to match those of the regionDict data\r\n    resetAllRegionStyle() {\r\n        Object.values(this.geojsonRef.current._layers).forEach(layer => {\r\n            layer.setStyle(this.style(layer.feature, layer));\r\n        });\r\n    }\r\n\r\n    // Resets style of specified regions to match those of regionDict data\r\n    resetSpecifiedRegionStyle(indices) {\r\n        let layers = Object.values(this.geojsonRef.current._layers);\r\n        indices.forEach(index => {\r\n            let layer = layers[index];\r\n            let feature = layer.feature;\r\n            layers[index].setStyle(this.style(feature, layer));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <MapContainer\r\n                center={[30, 0]}\r\n                zoom={3}\r\n                scrollWheelZoom\r\n                preferCanvas\r\n                zoomSnap={0}\r\n                wheelPxPerZoomLevel={120}\r\n                doubleClickZoom={false}\r\n                zoomControl={false}\r\n                attributionControl={false}\r\n                worldCopyJump\r\n                id=\"map\"\r\n                className={classes.mapContainer}\r\n            >\r\n                <LayersControl position=\"topright\">\r\n                    {mapProviders.map((entry, index) => <LayersControl.BaseLayer key={entry.name} checked={index===0} name={entry.name}>\r\n                        <TileLayer\r\n                            attribution={entry.attr}\r\n                            url={entry.src}\r\n                        ></TileLayer>\r\n                    </LayersControl.BaseLayer>)}\r\n                    <LayersControl.Overlay checked name=\"Regions\">\r\n                        <GeoJSON\r\n                            data={this.state.baseMap}\r\n                            style={this.style}\r\n                            onEachFeature={this.onEachFeature}\r\n                            ref={this.geojsonRef}\r\n                        ></GeoJSON>\r\n                    </LayersControl.Overlay>\r\n                </LayersControl>\r\n                <AttributionControl position=\"bottomright\" />\r\n                {this.props.lassoSelecting && <LassoComponent updateLassoSelecting={this.props.updateLassoSelecting} assignRegions={this.props.assignRegions} />}\r\n            </MapContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(MapComponent);","// Import React\r\nimport React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n// Import color picker\r\nimport { SliderPicker } from 'react-color';\r\n\r\nconst useStyles = theme => ({\r\n    colorBarContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: \"35%\",\r\n        width: \"30%\",\r\n        height: 50,\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"stretch\",\r\n        marginTop: 30,\r\n        padding: 5,\r\n        borderStyle: \"ridge\",\r\n        borderColor: theme.palette.border,\r\n        WebkitBorderImage: theme.palette.borderImage\r\n    },\r\n});\r\n\r\nclass ColorBarComponent extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            color: \"#bf4340\", // Default color, it is the color when slider in first row of color bar is set to leftmost position, and the centre one of the 5 colors in the second row of the color bar is chosen\r\n        }\r\n    }\r\n\r\n    render() { //FIXME: add some color tests to ensure that selected color is notified if coincides with a color already on the page\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.colorBarContainer} id=\"colorbar\">\r\n                <SliderPicker color={this.state.color} onChange={(color, event) => this.setState({color: color.hex})}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(ColorBarComponent);","// Import React\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbarContainer: {\r\n        position: \"absolute\",\r\n        top: 96,\r\n        right: \"50%\",\r\n        marginRight: -148 / 2,\r\n        height: 30,\r\n        width: 130,\r\n        zIndex: 1,\r\n        display: \"flex\",\r\n        flexFlow: \"row\",\r\n        justifyContent: \"flex-end\",\r\n        borderBottomStyle: \"ridge\",\r\n        borderLeftStyle: \"ridge\",\r\n        borderRightStyle: \"ridge\",\r\n        borderColor: theme.palette.border,\r\n        backgroundImage: theme.palette.backgroundImage.main,\r\n        WebkitBorderImage: theme.palette.borderImage\r\n    },\r\n    toolbarButton: {\r\n        fontSize: 12,\r\n        margin: 0,\r\n        padding: 0,\r\n        height: \"100%\",\r\n    }\r\n}));\r\n\r\nfunction ToolbarComponent(props) {\r\n    const classes = useStyles();\r\n    const lassoButtonText = props.lassoSelecting ? \"Cancel\" : \"Lasso\"; // TODO: using switches might be better in these situations\r\n    const lassoButtonColor = props.lassoSelecting ? \"secondary\" : \"default\";\r\n    const eraserButtonText = props.erasing ? \"Cancel\" : \"Erase\";\r\n    const eraserButtonColor = props.erasing ? \"secondary\" : \"default\";\r\n    return (\r\n        <div className={classes.toolbarContainer} id=\"toolbar\">\r\n            <Button color={eraserButtonColor} className={classes.toolbarButton} onClick={() => { props.updateErasing(!props.erasing); }}>{eraserButtonText}</Button>\r\n            <Button color={lassoButtonColor} className={classes.toolbarButton} onClick={() => { props.updateLassoSelecting(!props.lassoSelecting); }}>{lassoButtonText}</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ToolbarComponent);","import { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport cloneDeep from \"clone-deep\";\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    legendContainer: {\r\n        height: 200,\r\n        width: \"100%\",\r\n    },\r\n    legendEntry: {\r\n        display: \"flex\",\r\n        flexFlow: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-start\",\r\n    },\r\n    legendEntryColor: {\r\n        width: 12,\r\n        height: 12,\r\n        margin: 5,\r\n    },\r\n    legendEntryLabel: {\r\n        fontSize: 11,\r\n    },\r\n    legendGrid: {\r\n        height: 200,\r\n    }\r\n}));\r\n\r\nfunction LegendEntry(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.legendEntry}>\r\n            <div\r\n                style={{ backgroundColor: props.color }}\r\n                className={classes.legendEntryColor}\r\n                onClick={() => {\r\n                    props.setDefaultColorBarColor(props.color);\r\n                }}\r\n            />\r\n            <InputBase\r\n                className={classes.legendEntryLabel}\r\n                value={props.label}\r\n                onChange={props.onChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction LegendComponent(props) {\r\n    const classes = useStyles();\r\n    const entries = Object.keys(props.app.state.pluginData[\"Legend\"][props.app.state.activeEntry]).map((color) =>\r\n        <LegendEntry\r\n            key={color}\r\n            color={color}\r\n            label={props.app.state.pluginData[\"Legend\"][props.app.state.activeEntry][color]}\r\n            item\r\n            onChange={e => {\r\n                let currentLegendData = cloneDeep(props.app.state.pluginData[\"Legend\"]);\r\n                currentLegendData[props.app.state.activeEntry][color] = e.target.value;\r\n                props.app.updatePluginData(\"Legend\", currentLegendData);\r\n            }}\r\n            setDefaultColorBarColor={props.app.setDefaultColorBarColor}\r\n        />);\r\n    return (\r\n        <div className={classes.legendContainer}>\r\n            <Scrollbars>\r\n                <Grid container direction=\"column\" justify=\"flex-start\" wrap=\"wrap\" className={classes.legendGrid}>\r\n                    {entries}\r\n                </Grid>\r\n            </Scrollbars>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst initState = scenarioData => {\r\n    let retval = [];\r\n    let i;\r\n    for (i = 0; i < scenarioData.length; i++) {\r\n        retval.push({});\r\n    }\r\n    return retval;\r\n};\r\n\r\n// Adds color-label key value pair to pluginData entry for level of corresponding activeEntry if color was added for the first time, or delete the entry if no region has the color after the assigning\r\nfunction onAssignRegions(app, indices, color, removedColors, addedColor) {\r\n    let currentLegendData = cloneDeep(app.state.pluginData[\"Legend\"]);\r\n    if (addedColor) {\r\n        currentLegendData[app.state.activeEntry][color] = \"Label\";\r\n    }\r\n    removedColors.forEach(color => {\r\n        delete currentLegendData[app.state.activeEntry][color];\r\n    });\r\n    app.updatePluginData(\"Legend\", currentLegendData);\r\n}\r\n\r\nfunction onAddEntry(app, index) {\r\n    let currentLegendData = cloneDeep(app.state.pluginData[\"Legend\"]);\r\n    let newLegendEntry = null;\r\n    if (index > 0) { // Use new\r\n        newLegendEntry = cloneDeep(currentLegendData[index - 1]);\r\n    } else { // Use default\r\n        newLegendEntry = {};\r\n    }\r\n    currentLegendData.splice(index, 0, newLegendEntry);\r\n    app.updatePluginData(\"Legend\", currentLegendData);\r\n}\r\n\r\nfunction onDeleteEntry(app, index) {\r\n    let currentLegendData = cloneDeep(app.state.pluginData[\"Legend\"]);\r\n    currentLegendData.splice(index, 1);\r\n    app.updatePluginData(\"Legend\", currentLegendData);\r\n}\r\n\r\n// This dictionary contains the component, initial state value generation function for the plugin's entry in pluginData; this be based off the scenarioData state value\r\nconst LegendPluginDict = {\r\n    component: LegendComponent,\r\n    initState: initState, // Given the value of scenarioData (assumed to be the scenarioDataDefault), the plugin should be able to work out its initial pluginData value\r\n    // Below are functions to be called as part of App.js's corresponding methods, they expected to have this (of App) binded to them, and so code for them can be written accordingly\r\n    // The arguments they expect should be the app (as in this of the app component) + the same as the corresponding arguments in App, except for the callback TODO: this is quite a dangerous practice to give reference to top element to plugin, but it is quite useful, so going to do this for now (meaning probably not gunna change)\r\n    // For certain methods, other arguments are provided to improve performance and code reuse, check app.js for details\r\n    // The functions should not rely on the completion of the associated methods, it should only depend on the state of the app prior to running the method\r\n    // This is, except onAssignRegions, which I've set to have to run as a callback after the app's setting is complete\r\n    functions: { // Note adding more functions than ones below would require adding in the run plugin function codes in the respective method of App\r\n        onAssignRegions: onAssignRegions,\r\n        onAddEntry: onAddEntry, // Expects index argument\r\n        onDeleteEntry: onDeleteEntry, // Expects index argument\r\n        onUpdateActiveEntry: null,\r\n        onUpdateEventDate: null,\r\n        onUpdateEvent: null,\r\n        onLoadSave: null,\r\n        onProcessRegionHoveredOn: null,\r\n        onProcessRegionHoveredOut: null,\r\n    }\r\n};\r\n\r\nexport default LegendPluginDict;","import { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    regionInfoContainer: {\r\n        width: \"100%\",\r\n        paddingLeft: 10,\r\n    },\r\n    regionInfoColor: {\r\n        width: 20,\r\n        height: 20,\r\n        marginLeft: 5,\r\n        marginRight: 10,\r\n        borderColor: theme.palette.text.primary,\r\n    },\r\n    regionInfoLabel: {\r\n        margin: 5,\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n    },\r\n}));\r\n\r\nfunction RegionInfoComponent(props) {\r\n    const classes = useStyles();\r\n    const data = props.app.state.pluginData[\"Region Info\"];\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"flex-start\" className={classes.regionInfoContainer}>\r\n            <Grid container item direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\r\n                <div\r\n                    item=\"true\"\r\n                    style={{ backgroundColor: data.color ? data.color : props.app.themeDict.other.polyFillColorDefault }}\r\n                    className={classes.regionInfoColor}\r\n                />\r\n                <Typography variant=\"body2\" item=\"true\">{\"Name: \"}{data.name ? data.name : \"None\"}</Typography>\r\n            </Grid>\r\n            <Typography item=\"true\" variant=\"caption\" className={classes.regionInfoLabel}>{\"Label: \"}{data.label ? data.label : \"None\"}</Typography>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nconst initState = scenarioData => {\r\n    return {\r\n        color: null,\r\n        name: null,\r\n        label: null,\r\n    };\r\n};\r\n\r\n// Sets region info to appropriate values based on hovered on layer\r\nfunction onProcessRegionHoveredOn(app, layer) {\r\n    const regionID = layer.feature.properties.regionID;\r\n    const color = app.state.scenarioData[app.state.activeEntry].regionDict[regionID].color;\r\n    const name = layer.feature.properties.name;\r\n    const label = app.state.pluginData[\"Legend\"][app.state.activeEntry][color];\r\n    let newRegionInfoData = {\r\n        color: color ? color : null,\r\n        name: name ? name : null,\r\n        label: label ? label : null,\r\n    };\r\n    app.updatePluginData(\"Region Info\", newRegionInfoData);\r\n}\r\n\r\nconst RegionInfoPluginDict = {\r\n    component: RegionInfoComponent,\r\n    initState: initState,\r\n    functions: {\r\n        onAssignRegions: null,\r\n        onAddEntry: null,\r\n        onDeleteEntry: null,\r\n        onUpdateActiveEntry: null,\r\n        onUpdateEventDate: null,\r\n        onUpdateEvent: null,\r\n        onLoadSave: null,\r\n        onProcessRegionHoveredOn: onProcessRegionHoveredOn,\r\n        onProcessRegionHoveredOut: null, // Although not having this causes the region info to linger on  after moving out of a region, it is faster and I feel that is worth is, nevertheless, try to find a solution that resolves the performance issue and ensures on moving out the region info is set to null\r\n    }\r\n};\r\n\r\nexport default RegionInfoPluginDict;","// Import deep cloning function\r\nimport cloneDeep from 'clone-deep';\r\n\r\n// Create a scenario entry based on the inputted regionDict, date string, event description string\r\nexport default function createScenarioEntry(regionDict, date=\"\", event=\"\") {\r\n    return {\r\n        date: date,\r\n        event: event,\r\n        regionDict: cloneDeep(regionDict), // Necessary as it appears for such complicated objects simply setting equal to regionDict would not be pass by value enough, and so you end up with entries sharing state\r\n    }\r\n}","import React from 'react';\r\nimport Dropzone from 'react-dropzone';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport createScenarioEntry from '../scripts/createScenarioEntry.js';\r\nimport cloneDeep from 'clone-deep';\r\nimport csscolors from 'css-color-names';\r\n\r\n// Adding some additional colors that I customized in the alternate history app\r\ncsscolors[\"tyrian-purple\"] = \"#66023C\";\r\ncsscolors[\"wine\"] = \"#722f37\";\r\ncsscolors[\"persian-blue\"] = \"#1C39BB\";\r\ncsscolors[\"midnight-blue\"] = csscolors[\"midnightblue\"];\r\ncsscolors[\"sky-blue\"] = csscolors[\"skyblue\"];\r\ncsscolors[\"persian-green\"] = \"#00A693\";\r\ncsscolors[\"basil\"] = \"#579229\";\r\ncsscolors[\"fire\"] = \"#e25822\";\r\ncsscolors[\"ruby\"] = \"#9B111E\";\r\n\r\n// Setup styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    altHistEditorLoaderContainer: {\r\n        height: 120,\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: \"100%\",\r\n        padding: 5,\r\n    },\r\n    loaderDropzone: {\r\n        textAlign: \"center\",\r\n        backgroundColor: theme.palette.background.default,\r\n        height: 120,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    }\r\n\r\n}));\r\n\r\n// Class used for converting the alternate history editor save to the most recent save version in that app\r\n// This file aims to ensure back-ward compatibility of save files\r\n// Right now im doing a graduated thing of converting 1.0 to 1.1 and 1.1 to 1.2 and so on via functions for each, maybe it gets bad later but it'll be easy to refactor I assume so should be fine\r\nclass Loader { // Class which loads saves into the app, converting them regardless of version to the current version\r\n    constructor() {\r\n        this.currentSaveVersion = \"1.2\";\r\n    }\r\n\r\n    processSave(save) { // takes json parsed object file from menubar and converts it to the newest version\r\n        let version = this.detectSaveVersion(save);\r\n\r\n        if (version === \"1.0\") {\r\n            return this.processSave(this.one_zero_to_one_one(save));\r\n        } else if (version == \"1.1\") {\r\n            return this.one_one_to_one_two(save);\r\n        } else if (version == this.currentSaveVersion) { // no modification needed\r\n            return save;\r\n        }\r\n    }\r\n\r\n    one_one_to_one_two(save) { // converts 1.1 ver save to 1.2 ver save TODO: slight concerns as maybe pass by reference not value;\r\n        save.version = this.currentSaveVersion;\r\n        save.customMap = false; // 1.1 version saves didn't have non-inbuilt custom maps\r\n        save.customMapGeojson = false; // same reason as above\r\n        return save;\r\n    }\r\n\r\n    one_zero_to_one_one(save) { // converts 1.0 ver save to 1.1 ver save TODO: slight concerns as maybe pass by reference not value\r\n        save.version = \"1.1\";\r\n        let order = 0;\r\n        Object.values(save.entryDict).forEach(entry => {\r\n            // Assigns order based on current order of entryDict (which is insertion order I think if I remembered correction for such string keys)\r\n            entry[\"order\"] = order;\r\n            order++;\r\n        });\r\n        return save;\r\n    }\r\n\r\n    detectSaveVersion(save) { // detects save version from\r\n        if (\"version\" in save) { // case of versions from 1.1 onwards which has\r\n            return save.version;\r\n        } else { // case of version 1.0, as it didn't have a version attribute\r\n            return \"1.0\";\r\n        }\r\n    }\r\n}\r\n\r\n// Instance of the Loader class\r\nconst loader = new Loader();\r\n\r\n// Converts alternate history editor saves to the format appropriate for this this app\r\n// Expects a single file object, one that is compatible with JSON.stringify after processing\r\n// Returns the JSON object\r\nfunction loadScenario(app, file, onload = null) {\r\n    file.text().then(text => {\r\n        const obj = loader.processSave(JSON.parse(text));\r\n        if (obj.mapType === \"admin\") {\r\n            let convertedObj = {\r\n                scenarioData: [],\r\n                colorData: [],\r\n                pluginData: {},\r\n            };\r\n            // Generate scenarioData\r\n            Object.values(obj.entryDict).forEach(entry => {\r\n                let regionDict = cloneDeep(app.regionDictDefault);\r\n                for (const [index, color] of Object.entries(entry.mapData)) {\r\n                    if (!(index === \"undefined\")) { // We use string \"undefined\" for that seems to be what the json loading gives from the saves\r\n                        regionDict[index].color = csscolors[color];\r\n                    }\r\n                }\r\n                convertedObj.scenarioData.push(createScenarioEntry(regionDict, entry.date, entry.event));\r\n            });\r\n\r\n            // Generate colorData (due to known issues with the alternate history editor's count of colors, we shall count colors from mapData directly as opposed to using legendData in the save)\r\n            // Color string dict is here for a mapping from hex to string for later on when we wish to use refer to color tags in the save (which are in the form of a string) via hex codes in the generated colorDict\r\n            let colorStringDict = {};\r\n            Object.values(obj.entryDict).forEach(entry => {\r\n                let colorEntry = {};\r\n                for (const [index, color] of Object.entries(entry.mapData)) {\r\n                    if (!(index === \"undefined\")) { // We use string \"undefined\" for that seems to be what the json loading gives from the saves\r\n                        if (csscolors[color] in colorEntry) {\r\n                            colorEntry[csscolors[color]] += 1;\r\n                        } else {\r\n                            colorEntry[csscolors[color]] = 1;\r\n                        }\r\n\r\n                        // Update colorStringDict if the color concerned isn't in there already\r\n                        if (!(color in colorStringDict)) {\r\n                            colorStringDict[csscolors[color]] = color;\r\n                        }\r\n                    }\r\n                }\r\n                convertedObj.colorData.push(colorEntry);;\r\n            });\r\n\r\n            // Generate pluginData\r\n            // Initialise pluginData first\r\n            let pluginData = {};\r\n            for (const [name, entry] of Object.entries(app.plugins)) {\r\n                pluginData[name] = entry.initState(app.scenarioDataDefault);\r\n            };\r\n            // Modify pluginData entries (in comparison to the scenarioDataDefault case) that need to be changed according to our save, in this case at the time of writing only legend need to have its data modified\r\n            // Generate Legend data\r\n            pluginData[\"Legend\"] = [];\r\n            Object.values(obj.entryDict).forEach((entry, index) => {\r\n                // Note this index is note the same as those in obj, in obj the index starts from 1, here it starts from 0\r\n                let legendEntry = {};\r\n                for (const color of Object.keys(convertedObj.colorData[index])) {\r\n                    if (colorStringDict[color] in entry.legendData) {\r\n                        legendEntry[color] = entry.legendData[colorStringDict[color]].entry;\r\n                    } else {\r\n                        legendEntry[color] = \"None\";\r\n                    }\r\n                }\r\n                pluginData[\"Legend\"].push(legendEntry);\r\n            });\r\n            convertedObj.pluginData = pluginData;\r\n\r\n            // Load converted save\r\n            if (onload) {\r\n                onload(convertedObj);\r\n            }\r\n\r\n        } else {\r\n            console.log(\"Error: currently only supports importing admin map saves\")\r\n        }\r\n    });\r\n}\r\n\r\nfunction AltHistEditorLoaderPluginComponent(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.altHistEditorLoaderContainer}>\r\n            <Dropzone\r\n                onDrop={acceptedFiles => {\r\n                    loadScenario(props.app, acceptedFiles[0], props.app.loadSave);\r\n                }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <div className={classes.loaderDropzone}>\r\n                            <div>\r\n                                Drop your save here, or click to select files\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst initState = scenarioData => {\r\n    return null;\r\n};\r\n\r\nconst AltHistEditorLoaderPluginDict = {\r\n    component: AltHistEditorLoaderPluginComponent,\r\n    initState: initState,\r\n    functions: {\r\n        onAssignRegions: null,\r\n        onAddEntry: null,\r\n        onDeleteEntry: null,\r\n        onUpdateActiveEntry: null,\r\n        onUpdateEventDate: null,\r\n        onUpdateEvent: null,\r\n        onLoadSave: null,\r\n        onProcessRegionHoveredOn: null,\r\n        onProcessRegionHoveredOut: null,\r\n    }\r\n};\r\n\r\nexport default AltHistEditorLoaderPluginDict;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// Import scenarios\r\nimport scen356BC from \"../assets/scenario/356BC-Birth-of-Alexander.json\";\r\nimport scen1206 from \"../assets/scenario/1206-Rise-of-Mongolia.json\";\r\nimport scen1444 from \"../assets/scenario/1444-Battle-of-Varna.json\";\r\nimport scen1936 from \"../assets/scenario/1936-Coming-of-the-Storm.json\"\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n// Import json scenarios, keys should be names that will be displayed for the scenario\r\nconst scenarios = {\r\n    \"356BC Birth of Alexander\": scen356BC,\r\n    \"1206 Rise of Mongolia\": scen1206,\r\n    \"1444 Battle of Varna\": scen1444,\r\n    \"1936 Coming of the Storm\": scen1936,\r\n};\r\n\r\n// Setup styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    scenarioContainer: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: \"calc(100% - 10px)\", // This subtraction corresponds to the padding of the parent\r\n        padding: 5,\r\n        display: \"flex\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-start\",\r\n    },\r\n    scenarioSelect: {\r\n        fontSize: 12,\r\n        width: \"calc(100% - 10px)\",\r\n    }\r\n}));\r\n\r\n// Load file \r\nfunction ScenarioPluginComponent(props) {\r\n    const classes = useStyles();\r\n    const [selectedScenario, setSelectedScenario] = React.useState(Object.keys(scenarios)[0]);\r\n    return (\r\n        <div className={classes.scenarioContainer}>\r\n            <Select\r\n                value={selectedScenario}\r\n                className={classes.scenarioSelect}\r\n                onChange={e => {setSelectedScenario(e.target.value);}}\r\n            >\r\n                {Object.keys(scenarios).map(key => <MenuItem key={key} value={key}>\r\n                    {key}\r\n                </MenuItem>)}\r\n            </Select>\r\n            <Button onClick={() => {\r\n                props.app.loadSave(scenarios[selectedScenario]);\r\n            }}>Load</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst initState = scenarioData => {\r\n    return null;\r\n};\r\n\r\nconst ScenarioPluginDict = {\r\n    component: ScenarioPluginComponent,\r\n    initState: initState,\r\n    functions: {\r\n        onAssignRegions: null,\r\n        onAddEntry: null,\r\n        onDeleteEntry: null,\r\n        onUpdateActiveEntry: null,\r\n        onUpdateEventDate: null,\r\n        onUpdateEvent: null,\r\n        onLoadSave: null,\r\n        onProcessRegionHoveredOn: null,\r\n        onProcessRegionHoveredOut: null,\r\n    }\r\n};\r\n\r\nexport default ScenarioPluginDict;","// This is where to import the individual plugins, i.e. this is the list of plugins you wish to add to the app toolmenu\r\n// For sake of consistency, it is recommended to save the plugin component files in src/plugins; but of course you can save it anywhere you like and import it to this js file\r\nimport LegendPlugin from './plugins/LegendPlugin.js'; // Naming the plugins with Component is not required, it could have well been just Legend, given the source plugin file is named as such, having Plugin in the name is just due to personal preferences\r\nimport RegionInfoPlugin from './plugins/RegionInfoPlugin.js';\r\nimport AltHistEditorLoaderPlugin from './plugins/AltHistEditorLoaderPlugin.js';\r\nimport ScenarioPlugin from './plugins/ScenarioPlugin.js';\r\n\r\n// All imported plugins above should then be listed below with their names, which will serve as the title in the plugins menu\r\n// Names of plugins should be unique as they will also serve as keys to the accordion element\r\n// See LegendPlugin.js for example of plugin and the requirements of it \r\n// The ordering of plugins here also determine the order of plugin display in the app\r\nconst plugins = {\r\n    \"Region Info\": RegionInfoPlugin,\r\n    \"Legend\": LegendPlugin,\r\n    \"Scenario\": ScenarioPlugin,\r\n    \"Alt Hist Editor Loader\": AltHistEditorLoaderPlugin, \r\n};\r\n\r\nexport default plugins;","import { makeStyles } from '@material-ui/core/styles';\r\nimport plugins from \"../appPlugins.js\";\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    pluginMenuContainer: {\r\n        position:\"absolute\",\r\n        right: 0,\r\n        top: \"50%\",\r\n        zIndex: 1,\r\n        minWidth: 140, // At least 150px adding in padding\r\n        width: \"12%\",\r\n        minHeight: 240, // At least 250px adding in padding\r\n        height: \"60%\",\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"stretch\",\r\n        padding: 3,\r\n        transform: \"translate(0%, -50%)\",\r\n        borderTopStyle: \"ridge\",\r\n        borderBottomStyle: \"ridge\",\r\n        borderLeftStyle: \"ridge\",\r\n        borderColor: theme.palette.border,\r\n        backgroundImage: theme.palette.backgroundImage.main,\r\n        WebkitBorderImage: theme.palette.borderImage\r\n    },\r\n    accordionContainer: {\r\n        paddingRight: 10,\r\n        paddingLeft: 10,\r\n    },\r\n    accordionSummary: {\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n    },\r\n    accordionDetails: {\r\n        padding: 0,\r\n    },\r\n}));\r\n\r\nexport default function PluginMenuComponent(props) {\r\n    const classes = useStyles();\r\n    let accordionItems = [];\r\n    for (const [name, value] of Object.entries(plugins)) {\r\n        const Plugin = value.component;\r\n        accordionItems.push(\r\n            <Accordion defaultExpanded key={name} square>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon/>} className={classes.accordionSummary} IconButtonProps={{size:\"small\"}}>\r\n                    <Typography>{name}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.accordionDetails}>\r\n                    <Plugin app={props.app}/>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        );\r\n    }\r\n    return (\r\n        <div className={classes.pluginMenuContainer} id=\"plugin_menu\">\r\n            <Scrollbars>\r\n                <div className={classes.accordionContainer}>\r\n                    {accordionItems}\r\n                </div>\r\n            </Scrollbars>\r\n        </div>\r\n    );\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    addIconButtonContainer: {\r\n        position: \"absolute\",\r\n        top: -12,\r\n        padding: 0,\r\n        zIndex: 1,\r\n        transform: \"scale(0.8)\"\r\n    },\r\n    addIconButton: {\r\n        padding: 0,\r\n        zIndex: 2,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\nexport default function TimelineAddButton(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <div className={classes.addIconButtonContainer} style={{left : props.themeDict.timelineMarkerSpacing/2 + 16}}>\r\n                <IconButton size=\"small\" className={classes.addIconButton} onClick={() => { props.addEntry(props.index + 1); }}>\r\n                    {/*This is the fake button for visuals only*/}\r\n                    <AddIcon></AddIcon>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n}","// Import packages\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TimelineAddButton from './TimelineAddButton.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    timelineMarker: {\r\n        position: \"absolute\",\r\n        top: 15,\r\n        zIndex: 2,\r\n        transform: \"scale(0.8)\",\r\n    },\r\n    entryButton: {\r\n        color: theme.palette.text.primary,\r\n        padding: 0,\r\n    },\r\n    markerLabel: {\r\n        position: \"absolute\",\r\n        top: -20,\r\n        left: \"50%\",\r\n        textAlign: \"center\",\r\n        textOverflow: \"ellipsis\",\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n        color: theme.palette.text.primary\r\n    },\r\n}));\r\n\r\nexport default function TimelineMarker(props) {\r\n    const classes = useStyles();\r\n    const icon = props.selected ? <RadioButtonCheckedIcon/> : <RadioButtonUncheckedIcon/>;\r\n    return (\r\n        <div className={classes.timelineMarker} style={{left: (props.index+1)*props.themeDict.timelineMarkerSpacing}}>\r\n            {/*props.index+1 as we wish to add after the current entry*/}\r\n            <Typography\r\n                className={classes.markerLabel}\r\n                variant=\"body2\"\r\n                style={{\r\n                    width:props.themeDict.timelineMarkerLabelWidth,\r\n                    marginLeft:-props.themeDict.timelineMarkerLabelWidth/2,\r\n                }}\r\n            >\r\n            {props.label}\r\n            </Typography>\r\n            <TimelineAddButton themeDict={props.themeDict} addEntry={props.addEntry} index={props.index}/>\r\n            <IconButton className={classes.entryButton} size=\"small\" onClick={() => {props.updateActiveEntry(props.index);}}>\r\n                {icon}\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}","// Import packages\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\n// Import custom components\r\nimport TimelineMarker from './TimelineMarker.js';\r\n\r\n// Import script\r\nimport useWindowSize from '../scripts/useWindowSize.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    timelineBarContainer: {\r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n        height: 45, // If this is adjusted, need to adjust the height of the map element and event component as well so that the top of the timeline meets the bottom of the map\r\n        bottom: 0,\r\n        overflow: \"hidden\",\r\n        zIndex: 2,\r\n        borderTopStyle: \"ridge\",\r\n        borderColor: theme.palette.border,\r\n        backgroundImage: theme.palette.backgroundImage.main,\r\n        WebkitBorderImage: theme.palette.borderImage\r\n    },\r\n    timelineLine: {\r\n        position: \"absolute\",\r\n        top: 26,\r\n        left: 0,\r\n        height: 2,\r\n        backgroundColor: theme.palette.text.primary,\r\n    },\r\n    timelineBarContentContainer: {\r\n        display: \"relative\",\r\n        height: \"100%\",\r\n    },\r\n    timelineBarMarkerContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n    }\r\n}));\r\n\r\nexport default function TimelineBarComponent(props) {\r\n    const classes = useStyles();\r\n    const markers = props.scenarioData.map((entry, index) =>\r\n        <TimelineMarker key={index} index={index} label={entry.date} selected={props.activeEntry === index} updateActiveEntry={props.updateActiveEntry} addEntry={props.addEntry} themeDict={props.themeDict} />\r\n    )\r\n    const [width, height] = useWindowSize(); // Values that change whenever window is resized, height is not used for now TODO: get rid of height part if performacne suffers, else overhead I guess is fine\r\n    const lineLength = Math.max(width, (props.scenarioData.length + 1) * props.themeDict.timelineMarkerSpacing); // Take the larger of the viewport width and the length required to fit the timeline markers as the length of the timeline TODO: the issue of what I've done here is that the right end and the left end of the timeline won't match up in length when the second line length case in the max arguments is triggered, not too important, but fix it if possible\r\n    return (\r\n        <div className={classes.timelineBarContainer} id=\"timeline_bar\">\r\n            <Scrollbars className={classes.timelineBarContentContainer}>\r\n                <div className={classes.timelineBarContentContainer}>\r\n                    <div className={classes.timelineLine} style={{ width: lineLength }}></div>\r\n                    <div className={classes.timelineBarMarkerContainer} style={{ width: lineLength }}>\r\n                        {markers}\r\n                    </div>\r\n                </div>\r\n            </Scrollbars>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\n// Function for listener on windows resize\r\nexport default function useWindowSize() {\r\n    const [size, setSize] = React.useState([0, 0]);\r\n    React.useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n}","// Import React\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    eventContainer: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        bottom: 48, // This value should be such that the event box touches the timeline bar on the bottom, so adjust accordingly\r\n        minWidth: 140, // At least 150px adding in padding\r\n        width: \"15%\",\r\n        minHeight: 190, // At least 200px adding in padding\r\n        height: \"25%\",\r\n        zIndex: 1,\r\n        display: \"flex\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"stretch\",\r\n        padding: 5,\r\n        borderRightStyle: \"ridge\",\r\n        borderTopStyle: \"ridge\",\r\n        borderColor: theme.palette.border,\r\n        backgroundImage: theme.palette.backgroundImage.main,\r\n        WebkitBorderImage: theme.palette.borderImage\r\n    },\r\n    eventBar: {\r\n        display: \"flex\",\r\n        flexFlow: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n        backgroundImage: theme.palette.backgroundImage.main\r\n    },\r\n    eventButtonHolder: {\r\n        display: \"flex\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    eventContent: {\r\n        marginTop: 5,\r\n        flexGrow: 1,\r\n        resize: \"none\",\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: theme.palette.text.primary,\r\n    },\r\n    eventButton: {\r\n        fontSize: 10,\r\n        margin: 2,\r\n    },\r\n    dateInput: {\r\n        width: \"max(calc(100% - 40px),)\",\r\n        margin: 10,\r\n    }\r\n}));\r\n\r\nfunction TimelineEventComponent(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.eventContainer} id=\"timeline_event\">\r\n            <div className={classes.eventBar}>\r\n                <TextField size=\"small\" label=\"Date\" margin=\"dense\" value={props.date} onChange={e => {props.updateEventDate(e.target.value)}} className={classes.dateInput}></TextField>\r\n                <div className={classes.eventButtonHolder}>\r\n                    <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={() => {props.clearEntry();}} className={classes.eventButton}>Clear</Button>\r\n                    <Button variant=\"contained\" size=\"small\" color=\"secondary\" onClick={() => {props.deleteEntry(props.activeEntry);}} disabled={props.oneEntryLeft} className={classes.eventButton}>Delete</Button>\r\n                    {/*Delete button is disabled for the first entry TODO: because for now we haven't implemented the add entry before first element functionality yet, nor is there a button for it*/}\r\n                </div>  \r\n            </div>\r\n            <textarea className={classes.eventContent} value={props.event} onChange={e => {props.updateEvent(e.target.value)}} multiline=\"true\"></textarea>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(TimelineEventComponent);","export default __webpack_public_path__ + \"static/media/MarbleTexture.1cb26e16.jpg\";","export default __webpack_public_path__ + \"static/media/GoldTexture.302ee534.png\";","import MarbleTexture from '../assets/img/MarbleTexture.jpg';\r\nimport GoldTexture from '../assets/img/GoldTexture.png';\r\n\r\n// Colors should be given in hex\r\nconst themeDict = {\r\n    material: { // Theme object for material ui theming component FIXME: add corresponding use themeprovider thing to the app js\r\n        palette: {\r\n            type: \"dark\",\r\n            secondary: {\r\n                main: \"#d50000\",\r\n                light: \"#ff5131\",\r\n                dark: \"#9b0000\"\r\n            },\r\n            border: \"#d4af37\",\r\n            borderImage: `url(${GoldTexture}) 30`,\r\n            backgroundImage: {\r\n                main: `url(${MarbleTexture})`,\r\n            }\r\n        },\r\n    },\r\n    other: { // Theme object for map (currently done via cesium) to use, this is passed down as props to all child\r\n        polyStrokeColor: \"#36454F\",\r\n        polyStrokeWeight: 0.5,\r\n        polyFillColorDefault: \"#DCDCDC\",\r\n        polyFillOpacityDefault: 0.2,\r\n        polyFillOpacityColored: 0.6,\r\n        polyFillOpacityHovered: 0.9,\r\n        timelineMarkerSpacing: 120,\r\n        timelineMarkerLabelWidth: 100,\r\n    }\r\n\r\n}\r\n\r\nexport default themeDict;","// Import React and other modules\r\nimport React from \"react\";\r\nimport { createMuiTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\n\r\n// Import css\r\nimport './App.css';\r\n\r\n// Import custom components\r\nimport HelpComponent from \"./components/HelpComponent\";\r\nimport MenuComponent from \"./components/MenuComponent.js\";\r\nimport MapComponent from './components/MapComponent.js';\r\nimport ColorBarComponent from './components/ColorBarComponent.js';\r\nimport ToolbarComponent from \"./components/ToolbarComponent.js\";\r\nimport PluginMenuComponent from \"./components/PluginMenuComponent.js\";\r\nimport TimelineBarComponent from './components/TimelineBarComponent.js';\r\nimport TimelineEventComponent from './components/TimelineEventComponent.js';\r\n\r\n// Import default themeDict\r\nimport themeDict from './themes/default';\r\n\r\n// Import default basemap geojson\r\nimport mapAdmin from \"./assets/basemap/mapAdmin.json\";\r\n\r\n// Import scripts\r\nimport createRegionDict from './scripts/createRegionDict.js';\r\nimport createScenarioEntry from './scripts/createScenarioEntry.js';\r\nimport createRegionNameDict from './scripts/createRegionNameDict.js';\r\nimport saveScenario from './scripts/saveScenario.js';\r\n\r\n// Import plugins\r\nimport plugins from \"./appPlugins.js\";\r\n\r\n// Import deep clone\r\nimport cloneDeep from \"clone-deep\";\r\n\r\n// Import Google Analytics\r\nimport ReactGA from 'react-ga';\r\n\r\n// Setup Google Analytics\r\nReactGA.initialize(\"UA-176706567-4\");\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\n\r\n// Convert mapAdmin to a prototype, const dictionary indexed by regionID\r\nconst regionDictDefault = createRegionDict(mapAdmin);\r\n\r\n// Create a constant dictionary mapping index of region to name of region, as opposed to keeping this repeated info contained in every single entry in the scenario data\r\nconst regionNameDict = createRegionNameDict(mapAdmin);\r\n\r\n// Default scenarioData value\r\nconst scenarioDataDefault = [\r\n  createScenarioEntry(regionDictDefault, \"2000 January 1\", \"An Event\"), // Default is 2 entry with the default regionDict, empty date and event entry\r\n  createScenarioEntry(regionDictDefault, \"2010 January 1\", \"Another Event\"),\r\n];\r\n\r\nconst theme = createMuiTheme(themeDict.material);\r\n\r\nconst useStyles = theme => ({\r\n  backdrop: {\r\n    zIndex: 3,\r\n    color: '#fff',\r\n  },\r\n});\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.plugins = plugins;\r\n    // Default values should ideally all be based off the scenarioDataDefault\r\n    // Setup default state values\r\n    let pluginData = {};\r\n    for (const [name, entry] of Object.entries(this.plugins)) {\r\n      pluginData[name] = entry.initState(scenarioDataDefault);\r\n    }\r\n\r\n    let colorData = [];\r\n    let i;\r\n    for (i = 0; i < scenarioDataDefault.length; i++) {\r\n      colorData.push({});\r\n    }\r\n\r\n    // Set initial state\r\n    this.state = {\r\n      scenarioData: scenarioDataDefault, // Array of information for the scenarios\r\n      pluginData: pluginData, // Create object for data in plugin indexed by name of plugin\r\n      colorData: colorData, // Dictionary with corresponding entries to scenarioData, that records the number of regions of specific color for the scenario timeline entry\r\n      activeEntry: 0, // index of currently active on map entry in scenarioData\r\n      lassoSelecting: false, // state for whether lasso select tool is activated\r\n      erasing: false, // state for whether eraser tool is activated\r\n      helpOn: true, // On opening app, defaults to have help on\r\n    };\r\n\r\n    // Declare some constant attributes\r\n    this.regionNameDict = regionNameDict;\r\n    this.themeDict = themeDict;\r\n\r\n    // Some attributes for plugins to use\r\n    this.scenarioDataDefault = scenarioDataDefault;\r\n    this.regionDictDefault = regionDictDefault;\r\n\r\n    // Numerous refs\r\n    this.colorBarRef = React.createRef(null);\r\n    this.mapRef = React.createRef(null);\r\n\r\n    // Bind this to methods\r\n    this.getColor = this.getColor.bind(this);\r\n    this.assignRegions = this.assignRegions.bind(this);\r\n    this.updateActiveEntry = this.updateActiveEntry.bind(this);\r\n    this.addEntry = this.addEntry.bind(this);\r\n    this.updateEventDate = this.updateEventDate.bind(this);\r\n    this.updateEvent = this.updateEvent.bind(this);\r\n    this.deleteEntry = this.deleteEntry.bind(this);\r\n    this.updatePluginData = this.updatePluginData.bind(this);\r\n    this.clearEntry = this.clearEntry.bind(this);\r\n    this.loadSave = this.loadSave.bind(this);\r\n    this.updateLassoSelecting = this.updateLassoSelecting.bind(this);\r\n    this.updateErasing = this.updateErasing.bind(this);\r\n    this.setDefaultColorBarColor = this.setDefaultColorBarColor.bind(this);\r\n    this.processRegionHoveredOn = this.processRegionHoveredOn.bind(this);\r\n    this.processRegionHoveredOut = this.processRegionHoveredOut.bind(this);\r\n    this.save = this.save.bind(this);\r\n    this.closeHelp = this.closeHelp.bind(this);\r\n    this.openHelp = this.openHelp.bind(this);\r\n    this.getRegionColorByIndex = this.getRegionColorByIndex.bind(this);\r\n  }\r\n\r\n  openHelp() {\r\n    this.setState({ helpOn: true });\r\n  }\r\n\r\n  closeHelp() {\r\n    this.setState({ helpOn: false });\r\n  }\r\n\r\n  processRegionHoveredOn(layer) {\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onProcessRegionHoveredOn) {\r\n        entry.functions.onProcessRegionHoveredOn(this, layer);\r\n      }\r\n    });\r\n  }\r\n\r\n  processRegionHoveredOut(layer) {\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onProcessRegionHoveredOut) {\r\n        entry.functions.onProcessRegionHoveredOut(this, layer);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Updates plugin data for the specified plugin with the specified data, the key should be the one used in the plugins dictionary\r\n  updatePluginData(key, data) {\r\n    let currentData = cloneDeep(this.state.pluginData);\r\n    currentData[key] = data;\r\n    this.setState({ pluginData: currentData });\r\n  }\r\n\r\n  // Updates lasso selecting, expects true/false boolean value, then runs callback if any\r\n  updateLassoSelecting(newState, callback = null) {\r\n    this.setState({ lassoSelecting: newState }, () => {\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Update eraser state, such state in turn determins the value getColor returns\r\n  updateErasing(newState) {\r\n    this.setState({ erasing: newState });\r\n  }\r\n\r\n  // Returns hex of currently selected color, as in the colorBarComponent\r\n  getColor() {\r\n    return this.state.erasing ? null : this.colorBarRef.current.state.color;\r\n  }\r\n\r\n  // Sets color in colorBarComponent, expects a hex string\r\n  setDefaultColorBarColor(color) {\r\n    this.colorBarRef.current.setState({ color: color });\r\n  }\r\n\r\n  // Adds entry in position at specified index in scenarioData and colorData, new entry has no date nor event\r\n  addEntry(index) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    let currentColorData = cloneDeep(this.state.colorData);\r\n    let newRegionDict = null;\r\n    let newColorEntry = null;\r\n    if (index > 0) { // use the regionDict, color entry of the previous entry as the starting spot\r\n      newRegionDict = createScenarioEntry(currentData[index - 1].regionDict);\r\n      newColorEntry = cloneDeep(currentColorData[index - 1]);\r\n    } else { // use the default regionDict, color entry if we are to insert at the beginning, currently this is not possible as it seems to lead to a multi-rerender yet some code is not ran in app.render scenario, and I get a regionDict undefined thing which I have no idea why; in light of this, I didn't do the add entry button in front of the first entry\r\n      newRegionDict = createScenarioEntry(regionDictDefault);\r\n      newColorEntry = {};\r\n    }\r\n    currentData.splice(index, 0, newRegionDict);\r\n    currentColorData.splice(index, 0, newColorEntry);\r\n    this.setState({ scenarioData: currentData, colorData: currentColorData }, () => { this.updateActiveEntry(index); });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onAddEntry) {\r\n        entry.functions.onAddEntry(this, index);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Deletes entry in position at specified index in scenarioData and colorData\r\n  deleteEntry(index) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    let currentColorData = cloneDeep(this.state.colorData);\r\n    currentData.splice(index, 1);\r\n    currentColorData.splice(index, 1);\r\n    if (index === this.state.scenarioData.length - 1) {\r\n      // Deleted entry is last entry, hence new entry to be focused on is the entry before the last entry\r\n      let newIndex = index - 1;\r\n      // To avoid possibly access invalid active entry values, we update the activeEntry first, then update the scenarioDict to delete the entry\r\n      this.updateActiveEntry(newIndex, () => { this.setState({ scenarioData: currentData, colorData: currentColorData }); }) // Note reset style is included in the updateActiveEntry function already\r\n    } else {\r\n      // Deleted entry was not the last entry, hence new entry to be focused on is the entry after the deleted entry, i.e. activeEntry index need not change\r\n      this.setState({ scenarioData: currentData, colorData: currentColorData }, () => { this.mapRef.current.resetAllRegionStyle(); });\r\n    }\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onDeleteEntry) {\r\n        entry.functions.onDeleteEntry(this, index);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Updates event date for active entry, expects a string argument\r\n  updateEventDate(date) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].date = date;\r\n    this.setState({ scenarioData: currentData });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onUpdateEventDate) {\r\n        entry.functions.onUpdateEventDate(this, date);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Updates event description for active entry, expects a string argument\r\n  updateEvent(event) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].event = event;\r\n    this.setState({ scenarioData: currentData });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onUpdateEvent) {\r\n        entry.functions.onUpdateEvent(this, event);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Clears date and event of the current active entry, not the map though\r\n  clearEntry() {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].event = \"\";\r\n    currentData[this.state.activeEntry].date = \"\";\r\n    this.setState({ scenarioData: currentData });\r\n  }\r\n\r\n  // Updates index for active entry\r\n  updateActiveEntry(newIndex, callback = null) {\r\n    this.setState(\r\n      { activeEntry: newIndex },\r\n      () => {\r\n        this.mapRef.current.resetAllRegionStyle();\r\n        if (callback) { // runs callback if callback is not null\r\n          callback();\r\n        }\r\n      });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onUpdateActiveEntry) {\r\n        entry.functions.onUpdateActiveEntry(this, newIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Assigns regions of specified indices the currently selected color and update colorData accordingly, then run callback if any\r\n  assignRegions(indices, callback = null) {\r\n    const color = this.getColor();\r\n\r\n    // Modifying the new data before setting it as the state\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    let currentColorData = cloneDeep(this.state.colorData);\r\n    let removedColors = [];\r\n    let addedColor = false;\r\n\r\n    indices.forEach(index => {\r\n      const previousColor = currentData[this.state.activeEntry].regionDict[index].color;\r\n      // Update for scenarioData the color of the region\r\n      currentData[this.state.activeEntry].regionDict[index].color = color;\r\n\r\n      // Only need to update if the previousColor is different from current color\r\n      if (previousColor !== color) {\r\n        // Deal with decrementing previous color's colorData entry, if any\r\n        if (previousColor) {\r\n          currentColorData[this.state.activeEntry][previousColor] -= 1;\r\n          if (currentColorData[this.state.activeEntry][previousColor] === 0) {\r\n            // If the assigning took the count of regions of the color to 0, then remove it from the colorData\r\n            delete currentColorData[this.state.activeEntry][previousColor];\r\n            removedColors.push(previousColor);\r\n          }\r\n        }\r\n\r\n        // Deal with incrementing or creating entry for added color's colorData entry, if any\r\n        if (color) {\r\n          if (color in currentColorData[this.state.activeEntry]) {\r\n            currentColorData[this.state.activeEntry][color] += 1;\r\n          } else {\r\n            currentColorData[this.state.activeEntry][color] = 1;\r\n            addedColor = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Setting state, then do callback\r\n    this.setState({ scenarioData: currentData, colorData: currentColorData },\r\n      () => {\r\n        this.mapRef.current.resetSpecifiedRegionStyle(indices);\r\n        if (callback) {\r\n          callback();\r\n        }\r\n\r\n        // Running plugin methods\r\n        Object.values(this.plugins).forEach(entry => {\r\n          if (entry.functions.onAssignRegions) {\r\n            entry.functions.onAssignRegions(this, indices, color, removedColors, addedColor);\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  // Saves the currently loaded scenario\r\n  save() {\r\n    saveScenario({\r\n      scenarioData: this.state.scenarioData,\r\n      colorData: this.state.colorData,\r\n      pluginData: this.state.pluginData,\r\n    });\r\n  }\r\n\r\n  // Loads the specified save file containing scenarioData and pluginData, then sets current active entry to the first one, thereby resetting the region styling as well\r\n  loadSave(saveData) {\r\n    this.setState({ scenarioData: saveData.scenarioData, colorData: saveData.colorData, pluginData: saveData.pluginData }, () => { this.updateActiveEntry(0) });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onLoadSave) {\r\n        entry.functions.onLoadSave(this, saveData);\r\n      }\r\n    });\r\n  }\r\n\r\n  getRegionColorByIndex(index) {\r\n    // Return color hex, or null if that was the value\r\n    return this.state.scenarioData[this.state.activeEntry].regionDict[index].color;\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <div className=\"App\">\r\n          <Backdrop className={classes.backdrop} open={this.state.helpOn} onClick={this.closeHelp}>\r\n            <HelpComponent />\r\n          </Backdrop>\r\n          <MenuComponent\r\n            save={this.save}\r\n            loadSave={this.loadSave}\r\n            openHelp={this.openHelp}\r\n          />\r\n          <ToolbarComponent lassoSelecting={this.state.lassoSelecting} updateLassoSelecting={this.updateLassoSelecting} erasing={this.state.erasing} updateErasing={this.updateErasing} />\r\n          <PluginMenuComponent app={this}/>\r\n          <TimelineBarComponent\r\n            updateActiveEntry={this.updateActiveEntry}\r\n            activeEntry={this.state.activeEntry}\r\n            scenarioData={this.state.scenarioData}\r\n            addEntry={this.addEntry}\r\n            themeDict={this.themeDict.other}\r\n          />\r\n          <TimelineEventComponent\r\n            date={this.state.scenarioData[this.state.activeEntry].date}\r\n            event={this.state.scenarioData[this.state.activeEntry].event}\r\n            updateEventDate={this.updateEventDate}\r\n            updateEvent={this.updateEvent}\r\n            deleteEntry={this.deleteEntry}\r\n            activeEntry={this.state.activeEntry}\r\n            clearEntry={this.clearEntry}\r\n            oneEntryLeft={this.state.scenarioData.length === 1}\r\n            themeDict={this.themeDict.other}\r\n          />\r\n          <ColorBarComponent ref={this.colorBarRef} themeDict={this.themeDict.other} />\r\n          <MapComponent\r\n            getRegionColorByIndex={this.getRegionColorByIndex}\r\n            themeDict={this.themeDict.other}\r\n            baseMap={mapAdmin}\r\n            assignRegions={this.assignRegions}\r\n            lassoSelecting={this.state.lassoSelecting}\r\n            updateLassoSelecting={this.updateLassoSelecting}\r\n            processRegionHoveredOn={this.processRegionHoveredOn}\r\n            processRegionHoveredOut={this.processRegionHoveredOut}\r\n            ref={this.mapRef}\r\n          />\r\n        </div>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(App);","// Given geoJson with features (here assume regions, i.e. polygons/multipolygons) each with properties regionID and color and label\r\n// Generate a js object with keys as the regionID and value as object of the properties of the regions\r\nexport default function createRegionDict(geoJson) {\r\n    let retval = {};\r\n    geoJson.features.forEach(region => {\r\n        retval[region.properties.regionID] = { // TODO: get rid of object, change code elsewhre as well so it only has the value color, no need to object\r\n            color: null, // expects a hex string, or if null takes the default fill color as specified in theme\r\n        };\r\n    });\r\n    return retval;\r\n}","// Given geoJson with features (here assume regions, i.e. polygons/multipolygons) each with properties regionID and name\r\n// Generate a js object with keys as the regionID and value as object of the properties of the regions\r\nexport default function createRegionNameDict(geoJson) {\r\n    let retval = {};\r\n    geoJson.features.forEach(region => {\r\n        retval[region.properties.regionID] = region.properties.name;\r\n    });\r\n    return retval;\r\n}","import { saveAs } from 'file-saver';\r\n\r\n// Expects an generic javascript object, one that is compatible with JSON.stringify and reading\r\nexport default function saveScenario(obj) {\r\n    const blob = new Blob([JSON.stringify(obj)], {type: \"application/json;charset=utf-8\"});\r\n    saveAs(blob, \"save.json\");\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}