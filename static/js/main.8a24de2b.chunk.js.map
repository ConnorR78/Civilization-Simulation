{"version":3,"sources":["components/MenuComponent.js","scripts/saveScenario.js","scripts/loadScenario.js","components/LassoComponent.js","components/MapComponent.js","components/ColorBarComponent.js","components/ToolbarComponent.js","plugins/LegendPlugin.js","appPlugins.js","components/PluginMenuComponent.js","components/TimelineAddButton.js","components/TimelineMarker.js","components/TimelineBarComponent.js","scripts/useWindowSize.js","components/TimelineEventComponent.js","themes/default.js","scripts/createScenarioEntry.js","App.js","scripts/createRegionDict.js","scripts/createRegionNameDict.js","index.js"],"names":["useStyles","makeStyles","theme","menuContainer","position","top","left","height","width","zIndex","backgroundColor","palette","background","default","borderBottomRightRadius","display","flexFlow","justifyContent","menuButton","fontSize","margin","padding","MenuComponent","props","classes","className","Button","size","onClick","obj","blob","Blob","JSON","stringify","type","saveAs","saveScenario","data","onDrop","acceptedFiles","file","onload","text","then","parse","loadScenario","loadSave","getRootProps","getInputProps","LassoComponent","eventHandler","event","indices","layers","forEach","layer","feature","properties","regionID","push","updateLassoSelecting","assignRegions","map","useMap","lasso","L","setOptions","intersect","enable","React","useEffect","addEventListener","disable","removeEventListener","MapComponent","state","baseMap","geojsonRef","createRef","onEachFeature","bind","style","getRegionColorByIndex","resetAllRegionStyle","clickRegion","highlightRegion","resetHighlightRegion","index","color","this","regionDict","themeDict","polyFillColorDefault","polyStrokeColor","weight","polyStrokeWeight","fillColor","fillOpacity","polyFillOpacityDefault","polyFillOpacityHovered","setStyle","hightlightStyle","Object","values","current","_layers","MapContainer","center","zoom","scrollWheelZoom","preferCanvas","zoomSnap","wheelPxPerZoomLevel","doubleClickZoom","zoomControl","attributionControl","mapContainer","TileLayer","attribution","url","noWrap","GeoJSON","ref","AttributionControl","lassoSelecting","Component","withStyles","ColorBarComponent","colorBarContainer","onChange","setState","hex","alignItems","marginTop","borderRadius","toolbarContainer","right","borderBottomLeftRadius","toolbarButton","ToolbarComponent","lassoButtonText","lassoButtonColor","eraserButtonText","erasing","eraserButtonColor","updateErasing","legendContainer","legendEntry","legendEntryColor","legendEntryLabel","LegendEntry","setDefaultColorBarColor","InputBase","value","label","plugins","component","entries","keys","app","pluginData","activeEntry","e","currentLegendData","cloneDeep","target","updatePluginData","Grid","container","direction","justify","wrap","initState","scenarioData","i","retval","length","functions","onAssignRegions","removedColors","addedColor","onAddEntry","newLegendEntry","splice","onDeleteEntry","onUpdateActiveEntry","onUpdateEventDate","onUpdateEvent","onLoadSave","pluginMenuContainer","minWidth","minHeight","transform","accordionContainer","paddingRight","accordionSummary","paddingTop","paddingBottom","accordionDetails","accordionHeading","PluginMenuComponent","accordionItems","name","Plugin","Accordion","defaultExpanded","square","AccordionSummary","expandIcon","Typography","AccordionDetails","addIconButtonContainer","addIconButton","secondary","TimelineAddButton","timelineMarkerSpacing","IconButton","addEntry","timelineMarker","entryButton","primary","markerLabel","textAlign","textOverflow","overflow","whiteSpace","TimelineMarker","icon","selected","variant","timelineMarkerLabelWidth","marginLeft","updateActiveEntry","timelineBarContainer","bottom","timelineLine","timelineBarContentContainer","timelineBarMarkerContainer","TimelineBarComponent","markers","entry","date","useState","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","useWindowSize","lineLength","Math","max","eventContainer","eventBar","eventContent","flexGrow","resize","eventButton","dateInput","TimelineEventComponent","TextField","updateEventDate","clearEntry","deleteEntry","disabled","oneEntryLeft","updateEvent","multiline","material","other","createScenarioEntry","regionDictDefault","geoJson","features","region","createRegionDict","mapAdmin","regionNameDict","createRegionNameDict","scenarioDataDefault","App","colorData","colorBarRef","mapRef","getColor","key","currentData","newState","callback","currentColorData","newRegionDict","newColorEntry","newIndex","previousColor","saveData","defaultColorBarColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a24de2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport saveScenario from '../scripts/saveScenario.js';\r\nimport loadScenario from '../scripts/loadScenario.js';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        height: 25,\r\n        width: 150,\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        borderBottomRightRadius: 50,\r\n        display: \"flex\",\r\n        flexFlow: \"row\",\r\n        justifyContent: \"flex-start\",\r\n    },\r\n    menuButton: {\r\n        fontSize: 12,\r\n        margin: 0,\r\n        padding: 0,\r\n        height:\"100%\",\r\n    }\r\n}));\r\n\r\nexport default function MenuComponent(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.menuContainer}>\r\n            <Button size=\"small\" className={classes.menuButton} onClick={() => { saveScenario(props.data); }}>Save</Button>\r\n            <Dropzone\r\n                onDrop={acceptedFiles => {\r\n                    loadScenario(acceptedFiles[0], props.loadSave);\r\n                }}\r\n            >\r\n                {/*acceptedFiles[0] as we only care about a single file TODO: make some restriction to filetype (.json) to upload and number of files to upload (1 only)*/}\r\n                {/*TODO: Here we used a drop zone, this might be an overkill to be honest as I only need a load button, so if performance drops too much or too much bandwidth taken, try to simplify this*/}\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        <Button size=\"small\" className={classes.menuButton}>Load</Button>\r\n                        {/*This is a dummy button for visuals only, the uploading functionality is contained in the Dropzone and the input element*/}\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </div>\r\n    );\r\n}","import { saveAs } from 'file-saver';\r\n\r\n// Expects an generic javascript object, one that is compatible with JSON.stringify and reading\r\nexport default function saveScenario(obj) {\r\n    const blob = new Blob([JSON.stringify(obj)], {type: \"application/json;charset=utf-8\"});\r\n    saveAs(blob, \"save.json\");\r\n};","// Expects a single file object, one that is compatible with JSON.stringify after processing\r\n// Returns the JSON object\r\nexport default function loadScenario(file, onload=null) {\r\n    file.text().then(text => {\r\n        const obj = JSON.parse(text);\r\n        if (onload) {\r\n            onload(obj);\r\n        }\r\n    });\r\n}","import React from \"react\";\r\nimport L from \"leaflet\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport \"leaflet-lasso\";\r\n\r\nexport default function LassoComponent(props) {\r\n    // Event handler for when lasso selection is complete\r\n    const eventHandler = event => {\r\n        let indices = [];\r\n        if (event) { // Series of if statements to only record in indices the valid selected regions TODO: this seems a bit dodgy, problem is this is like one of those silently neglect mistakes types of code\r\n            if (event.layers) {\r\n                event.layers.forEach(layer => {\r\n                    if (layer) {\r\n                        if (layer.feature) {\r\n                            if (layer.feature.properties) {\r\n                                if (layer.feature.properties.regionID) {\r\n                                    indices.push(layer.feature.properties.regionID);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });       \r\n            }\r\n        }\r\n        props.updateLassoSelecting(false, () => {props.assignRegions(indices);})\r\n    };\r\n\r\n    // Setup lasso\r\n    const map = useMap();\r\n    const lasso = L.lasso(map);\r\n    lasso.setOptions({ intersect: true });\r\n    lasso.enable();\r\n\r\n    React.useEffect(() => {\r\n        // Execute region coloring upon lasso selection completion\r\n        map.addEventListener('lasso.finished', eventHandler);\r\n\r\n        return (() => { // What to do on unmounting the LassoComponent\r\n            lasso.disable(); // FIXME: bug: disabling via clicking cancel button, i.e. in the case of disabling via using the cancel button, appears to lead to the drawing of selection persisting, though that selection has no coloring effect\r\n            map.removeEventListener('lasso.finished', eventHandler); // Remove event handler to avoid creating multiple handlers\r\n        });\r\n    }, [map, lasso]);\r\n\r\n    return null;\r\n}\r\n","// Import React\r\nimport React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n// Import leaflet\r\nimport { MapContainer, GeoJSON, TileLayer, AttributionControl } from 'react-leaflet';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n// Import relevant custom components for plugins\r\nimport LassoComponent from \"./LassoComponent.js\";\r\n\r\nconst useStyles = theme => ({\r\n    mapContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100vw\",\r\n        height: \"calc(100vh - 45px)\", // the -50px is to ensure that the map's bottom meets the timeline bar, hence if timeline bar height is adjusted, adjust map height here accordingly\r\n        zIndex: 0,\r\n    },\r\n});\r\nclass MapComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            baseMap: props.baseMap,\r\n        }\r\n        this.geojsonRef = React.createRef(null);\r\n        // Binding methods\r\n        this.onEachFeature = this.onEachFeature.bind(this);\r\n        this.style = this.style.bind(this);\r\n        this.getRegionColorByIndex = this.getRegionColorByIndex.bind(this);\r\n        this.resetAllRegionStyle = this.resetAllRegionStyle.bind(this);\r\n        this.clickRegion = this.clickRegion.bind(this);\r\n        this.highlightRegion = this.highlightRegion.bind(this);\r\n        this.resetHighlightRegion = this.resetHighlightRegion.bind(this);\r\n    }\r\n\r\n    onEachFeature(feature, layer) {\r\n        layer.addEventListener(\"click\", () => {\r\n            this.clickRegion(feature, layer);\r\n        });\r\n        layer.addEventListener(\"mouseover\", () => {\r\n            this.highlightRegion(feature, layer);\r\n        });\r\n        layer.addEventListener(\"mouseout\", () => {\r\n            this.resetHighlightRegion(feature, layer);\r\n        });\r\n    }\r\n\r\n    // Returns hex color for the region of the specified index\r\n    getRegionColorByIndex(index) {\r\n        let color = this.props.regionDict[index].color;\r\n        // Return color hex if there is one, else if record shows null color, use the default fill color as specified in themeDict\r\n        return color ? color : this.props.themeDict.polyFillColorDefault;\r\n    }\r\n\r\n    style(feature, layer) {\r\n        return {\r\n            color: this.props.themeDict.polyStrokeColor,\r\n            weight: this.props.themeDict.polyStrokeWeight,\r\n            fillColor: this.getRegionColorByIndex(feature.properties.regionID),\r\n            fillOpacity: this.props.themeDict.polyFillOpacityDefault,\r\n        };\r\n    }\r\n\r\n\r\n    hightlightStyle(feature, layer) {\r\n        return {\r\n            fillOpacity: this.props.themeDict.polyFillOpacityHovered\r\n        };\r\n    }\r\n\r\n    highlightRegion(feature, layer) {\r\n        layer.setStyle(this.hightlightStyle(feature, layer));\r\n    }\r\n\r\n    resetHighlightRegion(feature, layer) {\r\n        layer.setStyle(this.style(feature, layer));\r\n    }\r\n\r\n    clickRegion(feature, layer) {\r\n        this.props.assignRegions([feature.properties.regionID]);\r\n        layer.setStyle(this.style(feature, layer)); // TODO: such setting would not highlight the region though, which might be a problem\r\n    }\r\n\r\n    // Resets styles of all regions to match those of the regionDict data\r\n    resetAllRegionStyle() {\r\n        Object.values(this.geojsonRef.current._layers).forEach(layer => {\r\n            layer.setStyle(this.style(layer.feature, layer));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <MapContainer\r\n                center={[30, 0]}\r\n                zoom={3}\r\n                scrollWheelZoom\r\n                preferCanvas\r\n                zoomSnap={0}\r\n                wheelPxPerZoomLevel={120}\r\n                doubleClickZoom={false}\r\n                zoomControl={false}\r\n                attributionControl={false}\r\n                className={classes.mapContainer}\r\n            >\r\n                <TileLayer\r\n                    attribution='Map data: &copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors | Map style: &copy <a href=\"https://opentopomap.org/\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\r\n                    url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\r\n                    noWrap\r\n                ></TileLayer>\r\n                <GeoJSON\r\n                    data={this.state.baseMap}\r\n                    style={this.style}\r\n                    onEachFeature={this.onEachFeature}\r\n                    ref={this.geojsonRef}\r\n                ></GeoJSON>\r\n                <AttributionControl position=\"bottomright\"/>\r\n                {this.props.lassoSelecting && <LassoComponent updateLassoSelecting={this.props.updateLassoSelecting} assignRegions={this.props.assignRegions}/>}\r\n            </MapContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(MapComponent);","// Import React\r\nimport React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n// Import color picker\r\nimport { SliderPicker } from 'react-color';\r\n\r\nconst useStyles = theme => ({\r\n    colorBarContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: \"35%\",\r\n        width: \"30%\",\r\n        height: 50,\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"stretch\",\r\n        marginTop: 5,\r\n        padding: 5,\r\n        borderRadius: 5,\r\n    },\r\n});\r\n\r\nclass ColorBarComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            color: \"#bf4340\", // Default color, it is the color when slider in first row of color bar is set to leftmost position, and the centre one of the 5 colors in the second row of the color bar is chosen\r\n        }\r\n    }\r\n\r\n    render() { //FIXME: add some color tests to ensure that selected color is notified if coincides with a color already on the page\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.colorBarContainer}>\r\n                <SliderPicker color={this.state.color} onChange={(color, event) => this.setState({color: color.hex})}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(ColorBarComponent);","// Import React\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbarContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        right: 0,\r\n        height: 25,\r\n        width: 150,\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        borderBottomLeftRadius: 50,\r\n        display: \"flex\",\r\n        flexFlow: \"row\",\r\n        justifyContent: \"flex-end\",\r\n    }, toolbarButton: {\r\n        fontSize: 12,\r\n        margin: 0,\r\n        padding: 0,\r\n        height:\"100%\",\r\n    }\r\n}));\r\n\r\n// FIXME: make toolbar look like a toolbar, clearly different from the manu bar ideally; and I think in fact put the color related tools beside the color bar as they are relevant\r\n\r\nexport default function ToolbarComponent(props) {\r\n        const classes = useStyles();\r\n        const lassoButtonText = props.lassoSelecting ? \"Cancel\" : \"Lasso\"; // TODO: using switches might be better in these situations\r\n        const lassoButtonColor = props.lassoSelecting ? \"secondary\" : \"default\";\r\n        const eraserButtonText = props.erasing ? \"Cancel\" : \"Eraser\";\r\n        const eraserButtonColor = props.erasing ? \"secondary\" : \"default\";\r\n        return (\r\n            <div className={classes.toolbarContainer}>\r\n                <Button color={eraserButtonColor} className={classes.toolbarButton} onClick={() => {props.updateErasing(!props.erasing);}}>{eraserButtonText}</Button>\r\n                <Button color={lassoButtonColor} className={classes.toolbarButton} onClick={() => {props.updateLassoSelecting(!props.lassoSelecting);}}>{lassoButtonText}</Button>\r\n            </div>\r\n        );\r\n    }","import { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport cloneDeep from \"clone-deep\";\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    legendContainer: {\r\n        height: 200,\r\n        width: \"100%\",\r\n    },\r\n    legendEntry: {\r\n        display: \"flex\",\r\n        flexFlow: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-start\",\r\n    },\r\n    legendEntryColor: {\r\n        width: 12,\r\n        height: 12,\r\n        margin: 5,\r\n    },\r\n    legendEntryLabel: {\r\n\r\n    }\r\n}));\r\n\r\nfunction LegendEntry(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.legendEntry}>\r\n            <div\r\n                style={{ backgroundColor: props.color }}\r\n                className={classes.legendEntryColor}\r\n                onClick={() => {\r\n                    props.setDefaultColorBarColor(props.color);\r\n                }}\r\n            />\r\n            <InputBase\r\n                className={classes.legendEntryLabel}\r\n                value={props.label}\r\n                onChange={props.onChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction LegendComponent(props) {\r\n    const classes = useStyles();\r\n    const entries = Object.keys(props.app.state.pluginData[\"Legend\"][props.app.state.activeEntry]).map((color) =>\r\n        <LegendEntry\r\n            key={color}\r\n            color={color}\r\n            label={props.app.state.pluginData[\"Legend\"][props.app.state.activeEntry][color]}\r\n            onChange={e => {\r\n                let currentLegendData = cloneDeep(props.app.state.pluginData[\"Legend\"]);\r\n                currentLegendData[props.app.state.activeEntry][color] = e.target.value;\r\n                props.app.updatePluginData(\"Legend\", currentLegendData);\r\n            }}\r\n            setDefaultColorBarColor={props.app.setDefaultColorBarColor}\r\n        />);\r\n    return (\r\n        <div className={classes.legendContainer}>\r\n            <Scrollbars>\r\n                <Grid container direction=\"column\" justify=\"flex-start\" wrap=\"wrap\">\r\n                    {entries}\r\n                </Grid>\r\n            </Scrollbars>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst initState = scenarioData => {\r\n    let retval = [];\r\n    let i;\r\n    for (i = 0; i < scenarioData.length; i++) {\r\n        retval.push({});\r\n    }\r\n    return retval;\r\n};\r\n\r\n// Adds color-label key value pair to pluginData entry for level of corresponding activeEntry if color was added for the first time, or delete the entry if no region has the color after the assigning\r\nfunction onAssignRegions(app, indices, color, removedColors, addedColor) {\r\n    let currentLegendData = cloneDeep(app.state.pluginData[\"Legend\"]);\r\n    if (addedColor) {\r\n        currentLegendData[app.state.activeEntry][color] = \"Label\";\r\n    }\r\n    removedColors.forEach(color => {\r\n        delete currentLegendData[app.state.activeEntry][color];\r\n    });\r\n    app.updatePluginData(\"Legend\", currentLegendData);\r\n}\r\n\r\nfunction onAddEntry(app, index) {\r\n    let currentLegendData = cloneDeep(app.state.pluginData[\"Legend\"]);\r\n    let newLegendEntry = null;\r\n    if (index > 0) { // Use new\r\n        newLegendEntry = cloneDeep(currentLegendData[index - 1]);\r\n    } else { // Use default\r\n        newLegendEntry = {};\r\n    }\r\n    currentLegendData.splice(index, 0, newLegendEntry);\r\n    app.updatePluginData(\"Legend\", currentLegendData);\r\n}\r\n\r\nfunction onDeleteEntry(app, index) {\r\n    let currentLegendData = cloneDeep(app.state.pluginData[\"Legend\"]);\r\n    currentLegendData.splice(index, 1);\r\n    app.updatePluginData(\"Legend\", currentLegendData);\r\n}\r\n\r\n// This dictionary contains the component, initial state value generation function for the plugin's entry in pluginData; this be based off the scenarioData state value\r\nconst LegendPluginDict = {\r\n    component: LegendComponent,\r\n    initState: initState, // Expects a scenarioData argument (should be the default one for initialization)\r\n    // Below are functions to be called as part of App.js's corresponding methods, they expected to have this (of App) binded to them, and so code for them can be written accordingly\r\n    // The arguments they expect should be the app (as in this of the app component) + the same as the corresponding arguments in App, except for the callback TODO: this is quite a dangerous practice to give reference to top element to plugin, but it is quite useful, so going to do this for now (meaning probably not gunna change)\r\n    // For certain methods, other arguments are provided to improve performance and code reuse, check app.js for details\r\n    // The functions should not rely on the completion of the associated methods, it should only depend on the state of the app prior to running the method\r\n    // This is, except onAssignRegions, which I've set to have to run as a callback after the app's setting is complete\r\n    functions: { // Note adding more functions than ones below would require adding in the run plugin function codes in the respective method of App\r\n        onAssignRegions: onAssignRegions,\r\n        onAddEntry: onAddEntry, // Expects index argument\r\n        onDeleteEntry: onDeleteEntry, // Expects index argument\r\n        onUpdateActiveEntry: null,\r\n        onUpdateEventDate: null,\r\n        onUpdateEvent: null,\r\n        onLoadSave: null,\r\n    }\r\n};\r\n\r\nexport default LegendPluginDict;","// This is where to import the individual plugins, i.e. this is the list of plugins you wish to add to the app toolmenu\r\n// For sake of consistency, it is recommended to save the plugin component files in src/plugins; but of course you can save it anywhere you like and import it to this js file\r\nimport LegendPlugin from './plugins/LegendPlugin.js'; // Naming the plugins with Component is not required, it could have well been just Legend, given the source plugin file is named as such, having Plugin in the name is just due to personal preferences\r\n\r\n// All imported plugins above should then be listed below with their names, which will serve as the title in the plugins menu\r\n// Names of plugins should be unique as they will also serve as keys to the accordion element\r\nconst plugins = {\r\n    \"Legend\": LegendPlugin,\r\n};\r\n\r\nexport default plugins;","import { makeStyles } from '@material-ui/core/styles';\r\nimport plugins from \"../appPlugins.js\";\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    pluginMenuContainer: {\r\n        position:\"absolute\",\r\n        right: 0,\r\n        top: \"50%\",\r\n        zIndex: 1,\r\n        minWidth: 190, // At least 200px adding in padding\r\n        width: \"20%\",\r\n        minHeight: 240, // At least 250px adding in padding\r\n        height: \"60%\",\r\n        backgroundColor: theme.palette.background.default,\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"stretch\",\r\n        padding: 3,\r\n        transform: \"translate(0%, -50%)\",\r\n    },\r\n    accordionContainer: {\r\n        paddingRight: 12,\r\n    },\r\n    accordionSummary: {\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n    },\r\n    accordionDetails: {\r\n        padding: 0,\r\n    },\r\n    accordionHeading: {\r\n\r\n    },\r\n}));\r\n\r\nexport default function PluginMenuComponent(props) {\r\n    const classes = useStyles();\r\n    let accordionItems = [];\r\n    for (const [name, value] of Object.entries(plugins)) {\r\n        const Plugin = value.component;\r\n        accordionItems.push(\r\n            <Accordion defaultExpanded key={name} square>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon/>} className={classes.accordionSummary}>\r\n                    <Typography className={classes.accordionHeading}>{name}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.accordionDetails}>\r\n                    <Plugin app={props.app}/>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        );\r\n    }\r\n    return (\r\n        <div className={classes.pluginMenuContainer}>\r\n            <Scrollbars>\r\n                <div className={classes.accordionContainer}>\r\n                    {accordionItems}\r\n                </div>\r\n            </Scrollbars>\r\n        </div>\r\n    );\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    addIconButtonContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        backgroundColor: theme.palette.background.default,\r\n        padding: 0,\r\n        zIndex: 1,\r\n        transform: \"scale(0.8)\"\r\n    },\r\n    addIconButton: {\r\n        padding: 0,\r\n        zIndex: 2,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\nexport default function TimelineAddButton(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <div className={classes.addIconButtonContainer} style={{left : props.themeDict.timelineMarkerSpacing/2 + 16}}>\r\n                <IconButton size=\"small\" className={classes.addIconButton} onClick={() => { props.addEntry(props.index + 1); }}>\r\n                    {/*This is the fake button for visuals only*/}\r\n                    <AddIcon></AddIcon>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n}","// Import packages\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TimelineAddButton from './TimelineAddButton.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    timelineMarker: {\r\n        position: \"absolute\",\r\n        top: 15,\r\n        zIndex: 2,\r\n        transform: \"scale(0.8)\",\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    entryButton: {\r\n        color: theme.palette.text.primary,\r\n        padding: 0,\r\n    },\r\n    markerLabel: {\r\n        position: \"absolute\",\r\n        top: -20,\r\n        left: \"50%\",\r\n        textAlign: \"center\",\r\n        textOverflow: \"ellipsis\",\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\"\r\n    },\r\n}));\r\n\r\nexport default function TimelineMarker(props) {\r\n    const classes = useStyles();\r\n    const icon = props.selected ? <RadioButtonCheckedIcon/> : <RadioButtonUncheckedIcon/>;\r\n    return (\r\n        <div className={classes.timelineMarker} style={{left: (props.index+1)*props.themeDict.timelineMarkerSpacing}}>\r\n            {/*props.index+1 as we wish to add after the current entry*/}\r\n            <Typography\r\n                className={classes.markerLabel}\r\n                variant=\"body2\"\r\n                style={{\r\n                    width:props.themeDict.timelineMarkerLabelWidth,\r\n                    marginLeft:-props.themeDict.timelineMarkerLabelWidth/2,\r\n                }}\r\n            >\r\n            {props.label}\r\n            </Typography>\r\n            <TimelineAddButton themeDict={props.themeDict} addEntry={props.addEntry} index={props.index}/>\r\n            <IconButton className={classes.entryButton} size=\"small\" onClick={() => {props.updateActiveEntry(props.index);}}>\r\n                {icon}\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}","// Import packages\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\n// Import custom components\r\nimport TimelineMarker from './TimelineMarker.js';\r\n\r\n// Import script\r\nimport useWindowSize from '../scripts/useWindowSize.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    timelineBarContainer: {\r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n        height: 45, // If this is adjusted, need to adjust the height of the map element and event component as well so that the top of the timeline meets the bottom of the map\r\n        bottom: 0,\r\n        overflow: \"hidden\",\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    timelineLine: {\r\n        position: \"absolute\",\r\n        top: 26,\r\n        left: 0,\r\n        height: 2,\r\n        backgroundColor: theme.palette.text.primary,\r\n    },\r\n    timelineBarContentContainer: {\r\n        display: \"relative\",\r\n        height: \"100%\",\r\n    },\r\n    timelineBarMarkerContainer: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n    }\r\n}));\r\n\r\nexport default function TimelineBarComponent(props) {\r\n    const classes = useStyles();\r\n    const markers = props.scenarioData.map((entry, index) =>\r\n        <TimelineMarker key={index} index={index} label={entry.date} selected={props.activeEntry === index} updateActiveEntry={props.updateActiveEntry} addEntry={props.addEntry} themeDict={props.themeDict} />\r\n    )\r\n    const [width, height] = useWindowSize(); // Values that change whenever window is resized, height is not used for now TODO: get rid of height part if performacne suffers, else overhead I guess is fine\r\n    const lineLength = Math.max(width, (props.scenarioData.length + 1) * props.themeDict.timelineMarkerSpacing); // Take the larger of the viewport width and the length required to fit the timeline markers as the length of the timeline TODO: the issue of what I've done here is that the right end and the left end of the timeline won't match up in length when the second line length case in the max arguments is triggered, not too important, but fix it if possible\r\n    return (\r\n        <div className={classes.timelineBarContainer}>\r\n            <Scrollbars className={classes.timelineBarContentContainer}>\r\n                <div className={classes.timelineBarContentContainer}>\r\n                    <div className={classes.timelineLine} style={{ width: lineLength }}></div>\r\n                    <div className={classes.timelineBarMarkerContainer} style={{ width: lineLength }}>\r\n                        {markers}\r\n                    </div>\r\n                </div>\r\n            </Scrollbars>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\n// Function for listener on windows resize\r\nexport default function useWindowSize() {\r\n    const [size, setSize] = React.useState([0, 0]);\r\n    React.useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n}","// Import React\r\nimport React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport { InputBase } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    eventContainer: {\r\n        position: \"absolute\",\r\n        left: 0,\r\n        bottom: 45, // This value should be such that the event box touches the timeline bar on the bottom, so adjust accordingly\r\n        minWidth: 240, // At least 250px adding in padding\r\n        width: \"20%\",\r\n        minHeight: 190, // At least 200px adding in padding\r\n        height: \"30%\",\r\n        zIndex: 1,\r\n        backgroundColor: theme.palette.background.default,\r\n        display: \"flex\",\r\n        flexFlow: \"column\",\r\n        alignItems: \"stretch\",\r\n        padding: 5,\r\n    },\r\n    eventBar: {\r\n        backgroundColor: theme.palette.background.default,\r\n        display: \"flex\",\r\n        height: 50,\r\n        flexFlow: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    eventContent: {\r\n        marginTop: 5,\r\n        flexGrow: 1,\r\n        resize: \"none\",\r\n    },\r\n    eventButton: {\r\n        fontSize: 10,\r\n        margin: 2,\r\n    },\r\n    dateInput: {\r\n        margin: 10,\r\n    }\r\n}));\r\n\r\nexport default function TimelineEventComponent(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.eventContainer}>\r\n            <div className={classes.eventBar}>\r\n                <TextField size=\"small\" label=\"Date\" margin=\"dense\" value={props.date} onChange={e => {props.updateEventDate(e.target.value)}} className={classes.dateInput}></TextField>\r\n                <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={() => {props.clearEntry();}} className={classes.eventButton}>Clear Entry</Button>\r\n                <Button variant=\"contained\" size=\"small\" color=\"secondary\" onClick={() => {props.deleteEntry(props.activeEntry);}} disabled={props.oneEntryLeft} className={classes.eventButton}>Delete Entry</Button>\r\n                {/*Delete button is disabled for the first entry TODO: because for now we haven't implemented the add entry before first element functionality yet, nor is there a button for it*/}\r\n            </div>\r\n            <textarea className={classes.eventContent} value={props.event} onChange={e => {props.updateEvent(e.target.value)}} multiline=\"true\"></textarea>\r\n        </div>\r\n    );\r\n}","// Colors should be given in hex\r\n\r\nconst themeDict = {\r\n    material: { // Theme object for material ui theming component FIXME: add corresponding use themeprovider thing to the app js\r\n\r\n    },\r\n    other: { // Theme object for map (currently done via cesium) to use, this is passed down as props to all child\r\n        polyStrokeColor: \"#A9A9A9\",\r\n        polyStrokeWeight: 0.5, // This seems to not work very well on windows for cesium\r\n        polyFillColorDefault: \"#f5f5f5\",\r\n        polyFillOpacityDefault: 0.7,\r\n        polyFillOpacityHovered: 0.9,\r\n        timelineMarkerSpacing: 120,\r\n        timelineMarkerLabelWidth: 100,\r\n    }\r\n\r\n}\r\n\r\nexport default themeDict;","// Import deep cloning function\r\nimport cloneDeep from 'clone-deep';\r\n\r\n// Create a scenario entry based on the inputted regionDict, date string, event description string\r\nexport default function createScenarioEntry(regionDict, date=\"\", event=\"\") {\r\n    return {\r\n        date: date,\r\n        event: event,\r\n        regionDict: cloneDeep(regionDict), // Necessary as it appears for such complicated objects simply setting equal to regionDict would not be pass by value enough, and so you end up with entries sharing state\r\n    }\r\n}","// Import React\r\nimport React from \"react\";\r\n\r\n// Import css\r\nimport './App.css';\r\n\r\n// Import custom components\r\nimport MenuComponent from \"./components/MenuComponent.js\";\r\nimport MapComponent from './components/MapComponent.js';\r\nimport ColorBarComponent from './components/ColorBarComponent.js';\r\nimport ToolbarComponent from \"./components/ToolbarComponent.js\";\r\nimport PluginMenuComponent from \"./components/PluginMenuComponent.js\";\r\nimport TimelineBarComponent from './components/TimelineBarComponent.js';\r\nimport TimelineEventComponent from './components/TimelineEventComponent.js';\r\n\r\n// Import default themeDict\r\nimport themeDict from './themes/default';\r\n\r\n// Import default basemap geojson\r\nimport mapAdmin from \"./assets/basemap/mapAdmin.json\";\r\n\r\n// Import scripts\r\nimport createRegionDict from './scripts/createRegionDict.js';\r\nimport createScenarioEntry from './scripts/createScenarioEntry.js';\r\nimport createRegionNameDict from './scripts/createRegionNameDict.js';\r\n\r\n// Import plugins\r\nimport plugins from \"./appPlugins.js\";\r\n\r\n// Import deep clone\r\nimport cloneDeep from \"clone-deep\";\r\n\r\n// Convert mapAdmin to a prototype, const dictionary indexed by regionID\r\nconst regionDictDefault = createRegionDict(mapAdmin);\r\n\r\n// Create a constant dictionary mapping index of region to name of region, as opposed to keeping this repeated info contained in every single entry in the scenario data\r\nconst regionNameDict = createRegionNameDict(mapAdmin);\r\n\r\n// Default scenarioData value\r\nconst scenarioDataDefault = [\r\n  createScenarioEntry(regionDictDefault, \"2000 January 1\", \"An Event\"), // Default is 2 entry with the default regionDict, empty date and event entry\r\n  createScenarioEntry(regionDictDefault, \"2010 January 1\", \"Another Event\"),\r\n];\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.plugins = plugins;\r\n    // Default values should ideally all be based off the scenarioDataDefault\r\n    // Setup default state values\r\n    let pluginData = {};\r\n    for (const [name, entry] of Object.entries(this.plugins)) {\r\n      pluginData[name] = entry.initState(scenarioDataDefault);\r\n    }\r\n\r\n    let colorData = [];\r\n    let i;\r\n    for (i = 0; i < scenarioDataDefault.length; i++) {\r\n      colorData.push({});\r\n    }\r\n\r\n    // Set initial state\r\n    this.state = {\r\n      scenarioData: scenarioDataDefault, // Array of information for the scenarios\r\n      pluginData: pluginData, // Create object for data in plugin indexed by name of plugin\r\n      colorData: colorData, // Dictionary with corresponding entries to scenarioData, that records the number of regions of specific color for the scenario timeline entry\r\n      activeEntry: 0, // index of currently active on map entry in scenarioData\r\n      lassoSelecting: false, // state for whether lasso select tool is activated\r\n      erasing: false, // state for whether eraser tool is activated\r\n    }\r\n\r\n    // Declare some constant attributes\r\n    this.regionNameDict = regionNameDict;\r\n    this.themeDict = themeDict;\r\n\r\n    // Numerous refs\r\n    this.colorBarRef = React.createRef(null);\r\n    this.mapRef = React.createRef(null);\r\n\r\n    // Bind this to methods\r\n    this.getColor = this.getColor.bind(this);\r\n    this.assignRegions = this.assignRegions.bind(this);\r\n    this.updateActiveEntry = this.updateActiveEntry.bind(this);\r\n    this.addEntry = this.addEntry.bind(this);\r\n    this.updateEventDate = this.updateEventDate.bind(this);\r\n    this.updateEvent = this.updateEvent.bind(this);\r\n    this.deleteEntry = this.deleteEntry.bind(this);\r\n    this.updatePluginData = this.updatePluginData.bind(this);\r\n    this.clearEntry = this.clearEntry.bind(this);\r\n    this.loadSave = this.loadSave.bind(this);\r\n    this.updateLassoSelecting = this.updateLassoSelecting.bind(this);\r\n    this.updateErasing = this.updateErasing.bind(this);\r\n    this.setDefaultColorBarColor = this.setDefaultColorBarColor.bind(this);\r\n  }\r\n\r\n  // Updates plugin data for the specified plugin with the specified data, the key should be the one used in the plugins dictionary\r\n  updatePluginData(key, data) {\r\n    let currentData = cloneDeep(this.state.pluginData);\r\n    currentData[key] = data;\r\n    this.setState({ pluginData: currentData });\r\n  }\r\n\r\n  // Updates lasso selecting, expects true/false boolean value, then runs callback if any\r\n  updateLassoSelecting(newState, callback = null) {\r\n    this.setState({ lassoSelecting: newState }, () => {\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Update eraser state, such state in turn determins the value getColor returns\r\n  updateErasing(newState) {\r\n    this.setState({ erasing: newState });\r\n  }\r\n\r\n  // Returns hex of currently selected color, as in the colorBarComponent\r\n  getColor() {\r\n    return this.state.erasing ? null : this.colorBarRef.current.state.color;\r\n  }\r\n\r\n  // Sets color in colorBarComponent, expects a hex string\r\n  setDefaultColorBarColor(color) {\r\n    this.colorBarRef.current.setState({color:color});\r\n  }\r\n\r\n  // Adds entry in position at specified index in scenarioData and colorData, new entry has no date nor event\r\n  addEntry(index) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    let currentColorData = cloneDeep(this.state.colorData);\r\n    let newRegionDict = null;\r\n    let newColorEntry = null;\r\n    if (index > 0) { // use the regionDict, color entry of the previous entry as the starting spot\r\n      newRegionDict = createScenarioEntry(currentData[index - 1].regionDict);\r\n      newColorEntry = cloneDeep(currentColorData[index - 1]);\r\n    } else { // use the default regionDict, color entry if we are to insert at the beginning, currently this is not possible as it seems to lead to a multi-rerender yet some code is not ran in app.render scenario, and I get a regionDict undefined thing which I have no idea why; in light of this, I didn't do the add entry button in front of the first entry\r\n      newRegionDict = createScenarioEntry(regionDictDefault);\r\n      newColorEntry = {};\r\n    }\r\n    currentData.splice(index, 0, newRegionDict);\r\n    currentColorData.splice(index, 0, newColorEntry);\r\n    this.setState({ scenarioData: currentData, colorData: currentColorData }, () => { this.updateActiveEntry(index); });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onAddEntry) {\r\n        entry.functions.onAddEntry(this, index);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Deletes entry in position at specified index in scenarioData and colorData\r\n  deleteEntry(index) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    let currentColorData = cloneDeep(this.state.colorData);\r\n    currentData.splice(index, 1);\r\n    currentColorData.splice(index, 1);\r\n    if (index === this.state.scenarioData.length - 1) {\r\n      // Deleted entry is last entry, hence new entry to be focused on is the entry before the last entry\r\n      let newIndex = index - 1;\r\n      // To avoid possibly access invalid active entry values, we update the activeEntry first, then update the scenarioDict to delete the entry\r\n      this.updateActiveEntry(newIndex, () => { this.setState({ scenarioData: currentData, colorData: currentColorData }); }) // Note reset style is included in the updateActiveEntry function already\r\n    } else {\r\n      // Deleted entry was not the last entry, hence new entry to be focused on is the entry after the deleted entry, i.e. activeEntry index need not change\r\n      this.setState({ scenarioData: currentData, colorData: currentColorData }, () => { this.mapRef.current.resetAllRegionStyle(); });\r\n    }\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onDeleteEntry) {\r\n        entry.functions.onDeleteEntry(this, index);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Updates event date for active entry, expects a string argument\r\n  updateEventDate(date) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].date = date;\r\n    this.setState({ scenarioData: currentData });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onUpdateEventDate) {\r\n        entry.functions.onUpdateEventDate(this, date);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Updates event description for active entry, expects a string argument\r\n  updateEvent(event) {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].event = event;\r\n    this.setState({ scenarioData: currentData });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onUpdateEvent) {\r\n        entry.functions.onUpdateEvent(this, event);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Clears date and event of the current active entry, not the map though\r\n  clearEntry() {\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    currentData[this.state.activeEntry].event = \"\";\r\n    currentData[this.state.activeEntry].date = \"\";\r\n    this.setState({ scenarioData: currentData });\r\n  }\r\n\r\n  // Updates index for active entry\r\n  updateActiveEntry(newIndex, callback = null) {\r\n    this.setState(\r\n      { activeEntry: newIndex },\r\n      () => {\r\n        this.mapRef.current.resetAllRegionStyle();\r\n        if (callback) { // runs callback if callback is not null\r\n          callback();\r\n        }\r\n      });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onUpdateActiveEntry) {\r\n        entry.functions.onUpdateActiveEntry(this, newIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Assigns regions of specified indices the currently selected color and update colorData accordingly, then run callback if any\r\n  assignRegions(indices, callback = null) {\r\n    const color = this.getColor();\r\n\r\n    // Modifying the new data before setting it as the state\r\n    let currentData = cloneDeep(this.state.scenarioData);\r\n    let currentColorData = cloneDeep(this.state.colorData);\r\n    let removedColors = [];\r\n    let addedColor = false;\r\n\r\n    indices.forEach(index => {\r\n      const previousColor = currentData[this.state.activeEntry].regionDict[index].color;\r\n      // Update for scenarioData the color of the region\r\n      currentData[this.state.activeEntry].regionDict[index].color = color;\r\n\r\n      // Only need to update if the previousColor is different from current color\r\n      if (previousColor !== color) {\r\n        // Deal with decrementing previous color's colorData entry, if any\r\n        if (previousColor) {\r\n          currentColorData[this.state.activeEntry][previousColor] -= 1;\r\n          if (currentColorData[this.state.activeEntry][previousColor] === 0) {\r\n            // If the assigning took the count of regions of the color to 0, then remove it from the colorData\r\n            delete currentColorData[this.state.activeEntry][previousColor];\r\n            removedColors.push(previousColor);\r\n          }\r\n        }\r\n\r\n        // Deal with incrementing or creating entry for added color's colorData entry, if any\r\n        if (color) {\r\n          if (color in currentColorData[this.state.activeEntry]) {\r\n            currentColorData[this.state.activeEntry][color] += 1;\r\n          } else {\r\n            currentColorData[this.state.activeEntry][color] = 1;\r\n            addedColor = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Setting state, then do callback\r\n    this.setState({ scenarioData: currentData, colorData: currentColorData },\r\n      () => {\r\n        this.mapRef.current.resetAllRegionStyle();\r\n        if (callback) {\r\n          callback();\r\n        }\r\n\r\n        // Running plugin methods\r\n        Object.values(this.plugins).forEach(entry => {\r\n          if (entry.functions.onAssignRegions) {\r\n            entry.functions.onAssignRegions(this, indices, color, removedColors, addedColor);\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  // Loads the specified save file containing scenarioData and pluginData, then sets current active entry to the first one, thereby resetting the region styling as well\r\n  loadSave(saveData) {\r\n    this.setState({ scenarioData: saveData.scenarioData, colorData: saveData.colorData, pluginData: saveData.pluginData }, () => { this.updateActiveEntry(0) });\r\n\r\n    // Running plugin methods\r\n    Object.values(this.plugins).forEach(entry => {\r\n      if (entry.functions.onLoadSave) {\r\n        entry.functions.onLoadSave(this, saveData);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <MenuComponent\r\n          data={{\r\n            scenarioData: this.state.scenarioData,\r\n            colorData: this.state.colorData,\r\n            pluginData: this.state.pluginData,\r\n          }}\r\n          loadSave={this.loadSave}\r\n        />\r\n        <ToolbarComponent lassoSelecting={this.state.lassoSelecting} updateLassoSelecting={this.updateLassoSelecting} erasing={this.state.erasing} updateErasing={this.updateErasing} />\r\n        <PluginMenuComponent app={this} />\r\n        <TimelineBarComponent\r\n          updateActiveEntry={this.updateActiveEntry}\r\n          activeEntry={this.state.activeEntry}\r\n          scenarioData={this.state.scenarioData}\r\n          addEntry={this.addEntry}\r\n          themeDict={this.themeDict.other}\r\n        />\r\n        <TimelineEventComponent\r\n          date={this.state.scenarioData[this.state.activeEntry].date}\r\n          event={this.state.scenarioData[this.state.activeEntry].event}\r\n          updateEventDate={this.updateEventDate}\r\n          updateEvent={this.updateEvent}\r\n          deleteEntry={this.deleteEntry}\r\n          activeEntry={this.state.activeEntry}\r\n          clearEntry={this.clearEntry}\r\n          oneEntryLeft={this.state.scenarioData.length === 1}\r\n          themeDict={this.themeDict.other}\r\n        />\r\n        <ColorBarComponent defaultColorBarColor={this.state.defaultColorBarColor} ref={this.colorBarRef} themeDict={this.themeDict.other} />\r\n        <MapComponent themeDict={this.themeDict.other} baseMap={mapAdmin} assignRegions={this.assignRegions} regionDict={this.state.scenarioData[this.state.activeEntry].regionDict} lassoSelecting={this.state.lassoSelecting} updateLassoSelecting={this.updateLassoSelecting} ref={this.mapRef} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// Given geoJson with features (here assume regions, i.e. polygons/multipolygons) each with properties regionID and color and label\r\n// Generate a js object with keys as the regionID and value as object of the properties of the regions\r\nexport default function createRegionDict(geoJson) {\r\n    let retval = {};\r\n    geoJson.features.forEach(region => {\r\n        retval[region.properties.regionID] = {\r\n            color: null, // expects a hex string, or if null takes the default fill color as specified in theme\r\n            label: null, // region has no label by default\r\n        };\r\n    });\r\n    return retval;\r\n}","// Given geoJson with features (here assume regions, i.e. polygons/multipolygons) each with properties regionID and name\r\n// Generate a js object with keys as the regionID and value as object of the properties of the regions\r\nexport default function createRegionNameDict(geoJson) {\r\n    let retval = {};\r\n    geoJson.features.forEach(region => {\r\n        retval[region.properties.regionID] = region.properties.name;\r\n    });\r\n    return retval;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}